{"ast":null,"code":"import { isNullOrUndefined, append, createElement, isBlazor, addClass } from '@syncfusion/ej2-base';\nimport { updateBlazorTemplate, resetBlazorTemplate } from '@syncfusion/ej2-base';\nimport { Tooltip } from '@syncfusion/ej2-popups';\nimport * as cls from '../base/css-constant';\nimport * as util from '../base/util';\n/**\r\n * Tooltip for Schedule\r\n */\n\nvar EventTooltip =\n/** @class */\nfunction () {\n  function EventTooltip(parent) {\n    this.parent = parent;\n    this.tooltipObj = new Tooltip({\n      animation: {\n        close: {\n          effect: isBlazor() ? 'None' : 'FadeOut'\n        }\n      },\n      content: 'No title',\n      position: 'BottomRight',\n      offsetY: 10,\n      mouseTrail: this.parent.isAdaptive ? false : true,\n      showTipPointer: false,\n      cssClass: this.parent.cssClass + ' ' + cls.EVENT_TOOLTIP_ROOT_CLASS,\n      target: this.getTargets(),\n      beforeRender: this.onBeforeRender.bind(this),\n      enableRtl: this.parent.enableRtl,\n      beforeOpen: this.onBeforeOpen.bind(this),\n      beforeClose: this.onBeforeClose.bind(this)\n    });\n    this.tooltipObj.appendTo(this.parent.element);\n    this.tooltipObj.isStringTemplate = true;\n  }\n\n  EventTooltip.prototype.getTargets = function () {\n    var targets = [];\n\n    if (this.parent.activeViewOptions.group.headerTooltipTemplate) {\n      targets.push('.' + cls.RESOURCE_CELLS_CLASS);\n    }\n\n    if (this.parent.eventSettings.enableTooltip) {\n      targets.push('.' + cls.APPOINTMENT_CLASS);\n    }\n\n    return targets.join(',');\n  };\n\n  EventTooltip.prototype.onBeforeOpen = function () {\n    if (isBlazor() && this.parent.group.headerTooltipTemplate) {\n      var templateId = this.parent.element.id + '_headerTooltipTemplate';\n      updateBlazorTemplate(templateId, 'HeaderTooltipTemplate', this.parent.group);\n    }\n\n    if (isBlazor() && this.parent.eventSettings.tooltipTemplate) {\n      var templateId = this.parent.element.id + '_tooltipTemplate';\n      updateBlazorTemplate(templateId, 'TooltipTemplate', this.parent.eventSettings);\n    }\n  };\n\n  EventTooltip.prototype.onBeforeClose = function () {\n    if (isBlazor() && this.parent.group.headerTooltipTemplate) {\n      var templateId = this.parent.element.id + '_headerTooltipTemplate';\n      resetBlazorTemplate(templateId, 'HeaderTooltipTemplate');\n    }\n\n    if (isBlazor() && this.parent.eventSettings.tooltipTemplate) {\n      var templateId = this.parent.element.id + '_tooltipTemplate';\n      resetBlazorTemplate(templateId, 'TooltipTemplate');\n    }\n\n    this.parent.resetTemplates();\n  }; // tslint:disable-next-line:max-func-body-length\n\n\n  EventTooltip.prototype.onBeforeRender = function (args) {\n    if (!isNullOrUndefined(args.target.getAttribute('data-tooltip-id'))) {\n      return;\n    }\n\n    if (args.target.classList.contains(cls.RESOURCE_CELLS_CLASS) && this.parent.activeViewOptions.group.resources.length > 0) {\n      var resCollection = void 0;\n\n      if (this.parent.activeView.isTimelineView()) {\n        var index = parseInt(args.target.getAttribute('data-group-index'), 0);\n        resCollection = this.parent.resourceBase.lastResourceLevel[index];\n      } else {\n        var rowIndex = args.target.parentNode.sectionRowIndex;\n        var cellIndex = args.target.cellIndex;\n        resCollection = this.parent.activeView.getColumnLevels()[rowIndex][cellIndex];\n      }\n\n      var data = {\n        resource: resCollection.resource,\n        resourceData: resCollection.resourceData\n      };\n      var contentContainer = createElement('div');\n      var templateId = this.parent.element.id + '_headerTooltipTemplate';\n      var tooltipTemplate = [].slice.call(this.parent.getHeaderTooltipTemplate()(data, this.parent, 'headerTooltipTemplate', templateId, false));\n      append(tooltipTemplate, contentContainer);\n      this.setContent(contentContainer);\n      return;\n    }\n\n    var record = this.parent.eventBase.getEventByGuid(args.target.getAttribute('data-guid'));\n\n    if (!isNullOrUndefined(this.parent.eventSettings.tooltipTemplate)) {\n      var contentContainer = createElement('div');\n      var templateId = this.parent.element.id + '_tooltipTemplate';\n      var templateArgs = util.addLocalOffsetToEvent(record, this.parent.eventFields);\n      var tooltipTemplate = [].slice.call(this.parent.getEventTooltipTemplate()(templateArgs, this.parent, 'tooltipTemplate', templateId, false));\n      append(tooltipTemplate, contentContainer);\n      this.setContent(contentContainer);\n    } else {\n      var globalize = this.parent.globalize;\n      var fields = this.parent.eventFields;\n      var eventStart = new Date('' + record[fields.startTime]);\n      var eventEnd = new Date('' + record[fields.endTime]);\n      eventEnd = eventEnd.getHours() === 0 && eventEnd.getMinutes() === 0 ? new Date(eventEnd.setMilliseconds(-1000)) : eventEnd;\n      var startDate = util.resetTime(new Date('' + eventStart));\n      var endDate = util.resetTime(new Date('' + eventEnd));\n      var tooltipSubject = record[fields.subject] || this.parent.eventSettings.fields.subject.default;\n      var tooltipLocation = !isNullOrUndefined(record[fields.location]) ? record[fields.location] : '';\n      var startMonthDate = '';\n      var startMonthYearDate = '';\n      var endMonthYearDate = '';\n\n      if (isBlazor()) {\n        startMonthDate = globalize.formatDate(eventStart, {\n          type: 'date',\n          format: 'MMM d',\n          calendar: this.parent.getCalendarMode()\n        });\n        startMonthYearDate = globalize.formatDate(eventStart, {\n          type: 'date',\n          format: 'MMMM d, y',\n          calendar: this.parent.getCalendarMode()\n        });\n        endMonthYearDate = globalize.formatDate(eventEnd, {\n          type: 'date',\n          format: 'MMMM d, y',\n          calendar: this.parent.getCalendarMode()\n        });\n      } else {\n        startMonthDate = globalize.formatDate(eventStart, {\n          type: 'date',\n          skeleton: 'MMMd',\n          calendar: this.parent.getCalendarMode()\n        });\n        startMonthYearDate = globalize.formatDate(eventStart, {\n          type: 'date',\n          skeleton: 'medium',\n          calendar: this.parent.getCalendarMode()\n        });\n        endMonthYearDate = globalize.formatDate(eventEnd, {\n          type: 'date',\n          skeleton: 'medium',\n          calendar: this.parent.getCalendarMode()\n        });\n      }\n\n      startMonthDate = util.capitalizeFirstWord(startMonthDate, 'single');\n      startMonthYearDate = util.capitalizeFirstWord(startMonthYearDate, 'single');\n      endMonthYearDate = util.capitalizeFirstWord(endMonthYearDate, 'single');\n      var skeleton = isBlazor() ? 't' : 'short';\n      var startTime = globalize.formatDate(eventStart, {\n        type: 'time',\n        skeleton: skeleton,\n        calendar: this.parent.getCalendarMode()\n      });\n      var endTime = globalize.formatDate(eventEnd, {\n        type: 'time',\n        skeleton: skeleton,\n        calendar: this.parent.getCalendarMode()\n      });\n      var tooltipDetails = void 0;\n\n      if (startDate.getTime() === endDate.getTime()) {\n        tooltipDetails = isBlazor() ? globalize.formatDate(eventStart, {\n          type: 'date',\n          format: 'MMMM d, y',\n          calendar: this.parent.getCalendarMode()\n        }) : globalize.formatDate(eventStart, {\n          type: 'date',\n          skeleton: 'long',\n          calendar: this.parent.getCalendarMode()\n        });\n        tooltipDetails = util.capitalizeFirstWord(tooltipDetails, 'single');\n      } else {\n        tooltipDetails = startDate.getFullYear() === endDate.getFullYear() ? startMonthDate + ' - ' + endMonthYearDate : startMonthYearDate + ' - ' + endMonthYearDate;\n      }\n\n      var tooltipTime = record[fields.isAllDay] ? this.parent.localeObj.getConstant('allDay') : startTime + ' - ' + endTime;\n      var content = '<div><div class=\"e-subject\">' + tooltipSubject + '</div>' + '<div class=\"e-location\">' + tooltipLocation + '</div>' + '<div class=\"e-details\">' + tooltipDetails + '</div>' + '<div class=\"e-all-day\">' + tooltipTime + '</div></div>';\n      this.setContent(content);\n    }\n\n    this.parent.renderTemplates();\n  };\n\n  EventTooltip.prototype.setContent = function (content) {\n    this.tooltipObj.setProperties({\n      content: content\n    }, true);\n  };\n\n  EventTooltip.prototype.close = function () {\n    this.tooltipObj.close();\n  };\n  /**\r\n   * To destroy the event tooltip.\r\n   * @return {void}\r\n   * @private\r\n   */\n\n\n  EventTooltip.prototype.destroy = function () {\n    this.tooltipObj.destroy();\n    addClass([this.parent.element], 'e-control');\n    this.tooltipObj = null;\n  };\n\n  return EventTooltip;\n}();\n\nexport { EventTooltip };","map":null,"metadata":{},"sourceType":"module"}