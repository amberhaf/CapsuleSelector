{"ast":null,"code":"import { Encoding, validateNullOrUndefined } from './encoding';\nimport { Save } from './save';\n/**\r\n * StreamWriter class contains the implementation for writing characters to a file in a particular encoding\r\n * ```typescript\r\n * let writer = new StreamWriter();\r\n * writer.write('Hello World');\r\n * writer.save('Sample.txt');\r\n * writer.dispose();\r\n * ```\r\n */\n\nvar StreamWriter =\n/** @class */\nfunction () {\n  /**\r\n   * Initializes a new instance of the StreamWriter class by using the specified encoding.\r\n   * @param  {Encoding} encoding?- The character encoding to use.\r\n   */\n  function StreamWriter(encoding) {\n    this.bufferBlob = new Blob(['']);\n    this.bufferText = '';\n    this.init(encoding);\n    Save.isMicrosoftBrowser = !!navigator.msSaveBlob;\n  }\n\n  Object.defineProperty(StreamWriter.prototype, \"buffer\", {\n    /**\r\n     * Gets the content written to the StreamWriter as Blob.\r\n     * @returns Blob\r\n     */\n    get: function get() {\n      this.flush();\n      return this.bufferBlob;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StreamWriter.prototype, \"encoding\", {\n    /**\r\n     * Gets the encoding.\r\n     * @returns Encoding\r\n     */\n    get: function get() {\n      return this.enc;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StreamWriter.prototype.init = function (encoding) {\n    if (encoding === null || encoding === undefined) {\n      this.enc = new Encoding(false);\n      this.enc.type = 'Utf8';\n    } else {\n      this.enc = encoding;\n      this.setBomByte();\n    }\n  };\n  /**\r\n   * Private method to set Byte Order Mark(BOM) value based on EncodingType\r\n   */\n\n\n  StreamWriter.prototype.setBomByte = function () {\n    if (this.encoding.includeBom) {\n      switch (this.encoding.type) {\n        case 'Unicode':\n          var arrayUnicode = new ArrayBuffer(2);\n          var uint8 = new Uint8Array(arrayUnicode);\n          uint8[0] = 255;\n          uint8[1] = 254;\n          this.bufferBlob = new Blob([arrayUnicode]);\n          break;\n\n        case 'Utf8':\n          var arrayUtf8 = new ArrayBuffer(3);\n          var utf8 = new Uint8Array(arrayUtf8);\n          utf8[0] = 239;\n          utf8[1] = 187;\n          utf8[2] = 191;\n          this.bufferBlob = new Blob([arrayUtf8]);\n          break;\n\n        default:\n          this.bufferBlob = new Blob(['']);\n          break;\n      }\n    }\n  };\n  /**\r\n   * Saves the file with specified name and sends the file to client browser\r\n   * @param  {string} fileName - The file name to save\r\n   * @returns {void}\r\n   */\n\n\n  StreamWriter.prototype.save = function (fileName) {\n    if (this.bufferText !== '') {\n      this.flush();\n    }\n\n    Save.save(fileName, this.buffer);\n  };\n  /**\r\n   * Writes the specified string.\r\n   * @param  {string} value - The string to write. If value is null or undefined, nothing is written.\r\n   * @returns {void}\r\n   */\n\n\n  StreamWriter.prototype.write = function (value) {\n    if (this.encoding === undefined) {\n      throw new Error('Object Disposed Exception: current writer is disposed');\n    }\n\n    validateNullOrUndefined(value, 'string');\n    this.bufferText += value;\n\n    if (this.bufferText.length >= 10240) {\n      this.flush();\n    }\n  };\n\n  StreamWriter.prototype.flush = function () {\n    if (this.bufferText === undefined || this.bufferText === null || this.bufferText.length === 0) {\n      return;\n    }\n\n    var bufferArray = this.encoding.getBytes(this.bufferText, 0, this.bufferText.length);\n    this.bufferText = '';\n    this.bufferBlob = new Blob([this.bufferBlob, bufferArray]);\n  };\n  /**\r\n   * Writes the specified string followed by a line terminator\r\n   * @param  {string} value - The string to write. If value is null or undefined, nothing is written\r\n   * @returns {void}\r\n   */\n\n\n  StreamWriter.prototype.writeLine = function (value) {\n    if (this.encoding === undefined) {\n      throw new Error('Object Disposed Exception: current writer is disposed');\n    }\n\n    validateNullOrUndefined(value, 'string');\n    this.bufferText = this.bufferText + value + '\\r\\n';\n\n    if (this.bufferText.length >= 10240) {\n      this.flush();\n    }\n  };\n  /**\r\n   * Releases the resources used by the StreamWriter\r\n   * @returns {void}\r\n   */\n\n\n  StreamWriter.prototype.destroy = function () {\n    this.bufferBlob = undefined;\n    this.bufferText = undefined;\n\n    if (this.enc instanceof Encoding) {\n      this.enc.destroy();\n    }\n\n    this.enc = undefined;\n  };\n\n  return StreamWriter;\n}();\n\nexport { StreamWriter };","map":null,"metadata":{},"sourceType":"module"}