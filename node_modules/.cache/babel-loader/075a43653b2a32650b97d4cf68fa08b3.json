{"ast":null,"code":"import { addClass, createElement, closest, remove, removeClass } from '@syncfusion/ej2-base';\nimport { VerticalEvent } from '../event-renderer/vertical-view';\nimport { MonthEvent } from '../event-renderer/month';\nimport { TimelineEvent } from '../event-renderer/timeline-view';\nimport * as cls from '../base/css-constant';\nimport * as events from '../base/constant';\nimport * as util from '../base/util';\n/**\r\n * Inline Edit interactions\r\n */\n\nvar InlineEdit =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor for InlineEdit\r\n   */\n  function InlineEdit(parent) {\n    this.parent = parent;\n    this.parent.on(events.inlineClick, this.inlineEdit, this);\n  }\n\n  InlineEdit.prototype.inlineEdit = function (args) {\n    this.parent.quickPopup.quickPopupHide();\n\n    if (args.type === 'Cell') {\n      this.removeInlineAppointmentElement();\n      this.cellEdit(args);\n    } else {\n      if (this.parent.element.querySelector('.' + cls.INLINE_SUBJECT_CLASS) !== args.element.querySelector('.' + cls.INLINE_SUBJECT_CLASS)) {\n        this.removeInlineAppointmentElement();\n      }\n\n      this.eventEdit(args);\n    }\n  };\n\n  InlineEdit.prototype.cellEdit = function (args) {\n    var saveObj = this.generateEventData();\n    var cellIndex = args.element.cellIndex;\n    var count = this.getEventDaysCount(saveObj);\n\n    if (count > 1) {\n      count = Math.round(count);\n      count--;\n      cellIndex = cellIndex - count;\n    }\n\n    var start = util.resetTime(new Date('' + saveObj[this.parent.eventFields.startTime])).getTime();\n    var end = util.resetTime(new Date('' + saveObj[this.parent.eventFields.endTime])).getTime();\n    var resIndex = args.groupIndex || 0;\n\n    if (this.parent.currentView === 'Day' || this.parent.currentView === 'Week' || this.parent.currentView === 'WorkWeek') {\n      var dayIndex = saveObj[this.parent.eventFields.startTime].getDay();\n      this.createVerticalViewInline(saveObj, dayIndex, resIndex, cellIndex);\n    } else if (this.parent.currentView === 'Month') {\n      this.createMonthViewInline(saveObj, resIndex, start, end);\n    } else {\n      this.createTimelineViewInline(saveObj, start, end, resIndex);\n    }\n\n    var inlineSubject = this.parent.element.querySelector('.' + cls.INLINE_SUBJECT_CLASS);\n\n    if (inlineSubject) {\n      inlineSubject.focus();\n    }\n  };\n\n  InlineEdit.prototype.eventEdit = function (args) {\n    var inlineSubject = args.element.querySelector('.' + cls.INLINE_SUBJECT_CLASS);\n    var subject;\n\n    if (inlineSubject) {\n      subject = inlineSubject.value;\n    } else {\n      var subEle = args.element.querySelector('.' + cls.SUBJECT_CLASS);\n      var timeEle = args.element.querySelector('.' + cls.APPOINTMENT_TIME);\n      subject = subEle.innerText;\n      inlineSubject = createElement('input', {\n        className: cls.INLINE_SUBJECT_CLASS,\n        attrs: {\n          value: subject\n        }\n      });\n      addClass([subEle], cls.DISABLE_CLASS);\n\n      if (closest(args.element, '.' + cls.MORE_POPUP_WRAPPER_CLASS)) {\n        args.element.insertBefore(inlineSubject, subEle);\n      } else if (['Agenda', 'MonthAgenda'].indexOf(this.parent.currentView) > -1) {\n        var subjectWrap = args.element.querySelector('.' + cls.SUBJECT_WRAP);\n        subjectWrap.insertBefore(inlineSubject, subjectWrap.firstChild);\n      } else {\n        var elementSelector = ['TimelineWeek', 'TimelineMonth'].indexOf(this.parent.currentView) > -1 ? '.e-inner-wrap' : '.e-appointment-details';\n        args.element.querySelector(elementSelector).insertBefore(inlineSubject, timeEle);\n      }\n    }\n\n    inlineSubject.focus();\n    inlineSubject.setSelectionRange(subject.length, subject.length);\n  };\n\n  InlineEdit.prototype.createVerticalViewInline = function (saveObj, dayIndex, resIndex, daysCount) {\n    var count = this.getEventDaysCount(saveObj);\n    var verticalEvent = new VerticalEvent(this.parent);\n    verticalEvent.initializeValues();\n    var index = verticalEvent.dateRender[resIndex].map(function (date) {\n      return date.getDay();\n    }).indexOf(dayIndex);\n\n    if (count >= 1) {\n      verticalEvent.allDayElement = [].slice.call(this.parent.element.querySelectorAll('.' + cls.ALLDAY_CELLS_CLASS));\n      verticalEvent.slots.push(this.parent.activeView.renderDates.map(function (date) {\n        return +date;\n      }));\n      var allDayElements = [].slice.call(this.parent.element.querySelectorAll('.' + cls.ALLDAY_APPOINTMENT_CLASS));\n      var allDayLevel = 0;\n\n      if (allDayElements.length > 0) {\n        allDayLevel = Math.floor(this.parent.element.querySelector('.' + cls.ALLDAY_ROW_CLASS).getBoundingClientRect().height / allDayElements[0].offsetHeight) - 1;\n      }\n\n      verticalEvent.allDayLevel = allDayLevel;\n      verticalEvent.renderAllDayEvents(saveObj, index, resIndex, daysCount, this.parent.allowInline);\n    } else {\n      verticalEvent.renderNormalEvents(saveObj, index, resIndex, daysCount, this.parent.allowInline);\n    }\n  };\n\n  InlineEdit.prototype.createMonthViewInline = function (saveObj, index, start, end) {\n    var count = this.getEventDaysCount(saveObj);\n    var saveObject = this.parent.eventBase.cloneEventObject(saveObj, start, end, count, false, false);\n    var monthEvent = new MonthEvent(this.parent);\n    monthEvent.dateRender = this.parent.activeView.renderDates;\n    monthEvent.inlineValue = this.parent.allowInline;\n    var renderDates = this.parent.activeView.renderDates;\n    var workDays = this.parent.activeViewOptions.workDays;\n    var monthCellSelector = '.' + cls.WORK_CELLS_CLASS;\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      monthCellSelector += '[data-group-index=\"' + index + '\"]';\n      var resourceData = this.parent.resourceBase.lastResourceLevel[index];\n      renderDates = resourceData.renderDates;\n      workDays = resourceData.workDays;\n    }\n\n    monthEvent.workCells = [].slice.call(this.parent.element.querySelectorAll(monthCellSelector));\n    monthEvent.cellWidth = monthEvent.workCells[0].offsetWidth;\n    monthEvent.cellHeight = monthEvent.workCells[0].offsetHeight;\n    monthEvent.eventHeight = util.getElementHeightFromClass(this.parent.monthModule.element, cls.APPOINTMENT_CLASS);\n    monthEvent.getSlotDates(workDays);\n    var filteredDates = monthEvent.getRenderedDates(renderDates);\n    var splittedEvents = monthEvent.splitEvent(saveObject, filteredDates || renderDates);\n\n    for (var _i = 0, splittedEvents_1 = splittedEvents; _i < splittedEvents_1.length; _i++) {\n      var eventData = splittedEvents_1[_i];\n      monthEvent.renderEvents(eventData, index);\n    }\n\n    var inlineSubject = this.parent.element.querySelector('.' + cls.INLINE_SUBJECT_CLASS);\n    inlineSubject.focus();\n  };\n\n  InlineEdit.prototype.createTimelineViewInline = function (saveObj, start, end, resIndex) {\n    var count = this.getEventDaysCount(saveObj);\n    var saveObject = this.parent.eventBase.cloneEventObject(saveObj, start, end, count, false, false);\n    var timelineView = new TimelineEvent(this.parent, this.parent.activeViewOptions.timeScale.enable ? 'hour' : 'day');\n    timelineView.dateRender = this.parent.activeView.renderDates;\n    timelineView.eventContainers = [].slice.call(this.parent.element.querySelectorAll('.' + cls.APPOINTMENT_CONTAINER_CLASS));\n    var workCell = this.parent.element.querySelector('.' + cls.WORK_CELLS_CLASS);\n    timelineView.inlineValue = this.parent.allowInline;\n    timelineView.cellWidth = workCell.offsetWidth;\n    timelineView.cellHeight = workCell.offsetHeight;\n    var dayLength = this.parent.element.querySelectorAll('.' + cls.CONTENT_TABLE_CLASS + ' tbody tr').length === 0 ? 0 : this.parent.element.querySelectorAll('.' + cls.CONTENT_TABLE_CLASS + ' tbody tr')[0].children.length;\n    timelineView.slotsPerDay = dayLength / timelineView.dateRender.length;\n    timelineView.eventHeight = util.getElementHeightFromClass(timelineView.element, cls.APPOINTMENT_CLASS);\n    timelineView.renderEvents(saveObject, resIndex);\n  };\n\n  InlineEdit.prototype.getEventDaysCount = function (saveObj) {\n    var startDate = saveObj[this.parent.eventFields.startTime];\n    var endDate = saveObj[this.parent.eventFields.endTime];\n    var daysCount = Math.abs(endDate.getTime() - startDate.getTime()) / util.MS_PER_DAY;\n    return daysCount;\n  };\n\n  InlineEdit.prototype.generateEventData = function (target) {\n    var inlineElement = this.parent.element.querySelector('.' + cls.INLINE_SUBJECT_CLASS);\n    var subject = inlineElement ? inlineElement.value : target ? target.innerHTML : '';\n    var saveObj = {};\n    saveObj[this.parent.eventFields.id] = this.parent.eventBase.getEventMaxID();\n    saveObj[this.parent.eventFields.subject] = subject;\n    saveObj[this.parent.eventFields.startTime] = this.parent.activeCellsData.startTime;\n    saveObj[this.parent.eventFields.endTime] = this.parent.activeCellsData.endTime;\n    saveObj[this.parent.eventFields.isAllDay] = this.parent.activeCellsData.isAllDay;\n    this.parent.eventWindow.setDefaultValueToObject(saveObj);\n\n    if (this.parent.resourceBase) {\n      this.parent.resourceBase.setResourceValues(saveObj, this.parent.activeCellsData.groupIndex);\n    }\n\n    return saveObj;\n  };\n\n  InlineEdit.prototype.documentClick = function () {\n    var target = this.parent.element.querySelector('.' + cls.INLINE_SUBJECT_CLASS);\n\n    if (target && target.value !== '') {\n      this.inlineCrudActions(target);\n    }\n  };\n\n  InlineEdit.prototype.inlineCrudActions = function (target) {\n    if (closest(target, '.' + cls.INLINE_APPOINTMENT_CLASS)) {\n      var saveObj = this.generateEventData(target);\n      this.parent.addEvent(saveObj);\n    } else {\n      var eventTarget = closest(target, '.' + cls.APPOINTMENT_CLASS);\n      var eventDetails = this.parent.getEventDetails(eventTarget);\n      eventDetails[this.parent.eventFields.subject] = target.value;\n      var currentAction = void 0;\n\n      if (eventDetails[this.parent.eventFields.id] === eventDetails[this.parent.eventFields.recurrenceID]) {\n        currentAction = 'EditOccurrence';\n        eventDetails[this.parent.eventFields.id] = this.parent.eventBase.getEventMaxID();\n      }\n\n      this.parent.saveEvent(eventDetails, currentAction);\n    }\n\n    this.removeInlineAppointmentElement();\n  };\n\n  InlineEdit.prototype.createInlineAppointmentElement = function (inlineData) {\n    var inlineAppointmentElement = createElement('div', {\n      className: cls.APPOINTMENT_CLASS + ' ' + cls.INLINE_APPOINTMENT_CLASS\n    });\n    var inlineDetails = createElement('div', {\n      className: cls.APPOINTMENT_DETAILS\n    });\n    inlineAppointmentElement.appendChild(inlineDetails);\n    var inline = createElement('input', {\n      className: cls.INLINE_SUBJECT_CLASS\n    });\n    inlineDetails.appendChild(inline);\n\n    if (inlineData) {\n      this.parent.eventBase.applyResourceColor(inlineAppointmentElement, inlineData, 'backgroundColor');\n    }\n\n    return inlineAppointmentElement;\n  };\n\n  InlineEdit.prototype.removeInlineAppointmentElement = function () {\n    var inlineAppointment = [].slice.call(this.parent.element.querySelectorAll('.' + cls.INLINE_APPOINTMENT_CLASS));\n\n    if (inlineAppointment.length > 0) {\n      inlineAppointment.forEach(function (node) {\n        return remove(node);\n      });\n    }\n\n    var inlineSubject = this.parent.element.querySelector('.' + cls.INLINE_SUBJECT_CLASS);\n\n    if (inlineSubject) {\n      var appointmentSubject = closest(inlineSubject, '.' + cls.APPOINTMENT_CLASS);\n      removeClass([appointmentSubject.querySelector('.' + cls.SUBJECT_CLASS)], cls.DISABLE_CLASS);\n      remove(inlineSubject);\n    }\n  };\n\n  InlineEdit.prototype.destroy = function () {\n    this.parent.off(events.inlineClick, this.inlineEdit);\n  };\n\n  return InlineEdit;\n}();\n\nexport { InlineEdit };","map":null,"metadata":{},"sourceType":"module"}