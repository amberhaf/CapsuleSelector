{"ast":null,"code":"'use strict';\n/**\n * @author Sebastian Pekarek\n * @module calendar\n * @constructor ICalCalendar Calendar\n */\n\nvar ICalCalendar = function ICalCalendar(_data) {\n  var data = {},\n      attributes = ['domain', 'prodId', 'method', 'name', 'description', 'timezone', 'ttl', 'url', 'events'],\n      vars,\n      generate,\n      i;\n  vars = {\n    allowedMethods: ['PUBLISH', 'REQUEST', 'REPLY', 'ADD', 'CANCEL', 'REFRESH', 'COUNTER', 'DECLINECOUNTER']\n  };\n\n  generate = function generate(calendar) {\n    var tools = require('./_tools.js'),\n        g = ''; // VCALENDAR and VERSION\n\n\n    g = 'BEGIN:VCALENDAR\\r\\nVERSION:2.0\\r\\n'; // PRODID\n\n    g += 'PRODID:-' + data.prodid + '\\r\\n'; // URL\n\n    if (data.url) {\n      g += 'URL:' + data.url + '\\r\\n';\n    } // METHOD\n\n\n    if (data.method) {\n      g += 'METHOD:' + data.method + '\\r\\n';\n    } // NAME\n\n\n    if (data.name) {\n      g += 'NAME:' + data.name + '\\r\\n';\n      g += 'X-WR-CALNAME:' + data.name + '\\r\\n';\n    } // Description\n\n\n    if (data.description) {\n      g += 'X-WR-CALDESC:' + data.description + '\\r\\n';\n    } // Timezone\n\n\n    if (data.timezone) {\n      g += 'TIMEZONE-ID:' + data.timezone + '\\r\\n';\n      g += 'X-WR-TIMEZONE:' + data.timezone + '\\r\\n';\n    } // TTL\n\n\n    if (data.ttl) {\n      g += 'REFRESH-INTERVAL;VALUE=DURATION:' + tools.duration(data.ttl) + '\\r\\n';\n      g += 'X-PUBLISHED-TTL:' + tools.duration(data.ttl) + '\\r\\n';\n    } // Events\n\n\n    data.events.forEach(function (event) {\n      g += event.generate(calendar);\n    });\n    g += 'END:VCALENDAR';\n    g = tools.foldLines(g);\n    return g;\n  };\n  /**\n   * Set your feed's domain…\n   *\n   * @param domain Domain\n   * @deprecated since 0.2.0\n   * @returns {ICalCalendar}\n   */\n\n\n  this.setDomain = function (domain) {\n    this.domain(domain);\n    return this;\n  };\n  /**\n   * Set/Get your feed's domain…\n   *\n   * @param [domain] Domain\n   * @since 0.2.0\n   * @returns {ICalCalendar|String}\n   */\n\n\n  this.domain = function (domain) {\n    if (!domain) {\n      return data.domain;\n    }\n\n    data.domain = domain.toString();\n    return this;\n  };\n  /**\n   * Set your feed's prodid. Can be either a string like\n   * \"//sebbo.net//ical-generator//EN\" or an object like\n   * {\n  *   \"company\": \"sebbo.net\",\n  *   \"product\": \"ical-generator\"\n  *   \"language\": \"EN\"\n  * }\n   *\n   * `language` is optional and defaults to `EN`.\n   *\n   * @param prodid ProdID\n   * @deprecated since 0.2.0\n   * @returns {ICalCalendar}\n   */\n\n\n  this.setProdID = function (prodid) {\n    if (!prodid || typeof prodid !== 'object') {\n      throw '`prodid` is not an object!';\n    } // update errors to 0.1.x version\n\n\n    try {\n      this.prodId(prodid);\n    } catch (err) {\n      throw err.replace(/`([\\w.]+)`/i, 'event.$1');\n    }\n\n    return this;\n  };\n  /**\n   * Set/Get your feed's prodid. `prodid` can be either a\n   * string like \"//sebbo.net//ical-generator//EN\" or an\n   * object like\n   * {\n   *   \"company\": \"sebbo.net\",\n   *   \"product\": \"ical-generator\"\n   *   \"language\": \"EN\"\n   * }\n   *\n   * `language` is optional and defaults to `EN`.\n   *\n   * @param [prodid] ProdID\n   * @since 0.2.0\n   * @returns {ICalCalendar}\n   */\n\n\n  this.prodId = function (prodid) {\n    if (!prodid) {\n      return data.prodid;\n    }\n\n    var prodIdRegEx = /^\\/\\/(.+)\\/\\/(.+)\\/\\/([A-Z]{1,4})$/,\n        language;\n\n    if (typeof prodid === 'string' && prodIdRegEx.test(prodid)) {\n      data.prodid = prodid;\n      return this;\n    }\n\n    if (typeof prodid === 'string') {\n      throw '`prodid` isn\\'t formated correctly. See https://github.com/sebbo2002/ical-generator#prodidstringobject-prodid';\n    }\n\n    if (typeof prodid !== 'object') {\n      throw '`prodid` needs to be a valid formed string or an object!';\n    }\n\n    if (!prodid.company) {\n      throw '`prodid.company` is a mandatory item!';\n    }\n\n    if (!prodid.product) {\n      throw '`prodid.product` is a mandatory item!';\n    }\n\n    language = (prodid.language || 'EN').toUpperCase();\n    data.prodid = '//' + prodid.company + '//' + prodid.product + '//' + language;\n    return this;\n  };\n  /**\n   * Set/Get your feed's method\n   *\n   * @param {String} method\n   * @since 0.2.8\n   * @returns {ICalCalendar|String}\n   */\n\n\n  this.method = function (method) {\n    if (method === undefined) {\n      return data.method;\n    }\n\n    if (!method) {\n      data.method = null;\n      return this;\n    }\n\n    if (vars.allowedMethods.indexOf(method.toUpperCase()) === -1) {\n      throw '`method` must be one of the following: ' + vars.allowedMethods.join(', ') + '!';\n    }\n\n    data.method = method.toUpperCase();\n    return this;\n  };\n  /**\n   * Set your feed's name…\n   *\n   * @param name Name\n   * @deprecated since 0.2.0\n   * @returns {ICalCalendar}\n   */\n\n\n  this.setName = function (name) {\n    this.name(name);\n    return this;\n  };\n  /**\n   * Set/Get your feed's name…\n   *\n   * @param [name] Name\n   * @since 0.2.0\n   * @returns {ICalCalendar}\n   */\n\n\n  this.name = function (name) {\n    if (name === undefined) {\n      return data.name;\n    }\n\n    data.name = name ? name.toString() : null;\n    return this;\n  };\n  /**\n   * Set/Get your feed's description…\n   *\n   * @param [description] Description\n   * @since 0.2.7\n   * @returns {ICalCalendar}\n   */\n\n\n  this.description = function (description) {\n    if (description === undefined) {\n      return data.description;\n    }\n\n    data.description = description ? description.toString() : null;\n    return this;\n  };\n  /**\n   * Set your feed's timezone.\n   * Used to set `X-WR-TIMEZONE`.\n   *\n   * @param timezone Timezone\n   * @example cal.setTZ('America/New_York');\n   * @deprecated since 0.2.0\n   * @returns {ICalCalendar}\n   */\n\n\n  this.setTZ = function (timezone) {\n    this.timezone(timezone);\n    return this;\n  };\n  /**\n   * Set/Get your feed's timezone.\n   * Used to set `X-WR-TIMEZONE`.\n   *\n   * @param [timezone] Timezone\n   * @example cal.timezone('America/New_York');\n   * @since 0.2.0\n   * @returns {ICalCalendar}\n   */\n\n\n  this.timezone = function (timezone) {\n    if (timezone === undefined) {\n      return data.timezone;\n    }\n\n    data.timezone = timezone ? timezone.toString() : null;\n    return this;\n  };\n  /**\n   * Set/Get your feed's URL\n   *\n   * @param [url] URL\n   * @example cal.url('http://example.com/my/feed.ical');\n   * @since 0.2.5\n   * @returns {ICalCalendar}\n   */\n\n\n  this.url = function (url) {\n    if (url === undefined) {\n      return data.url;\n    }\n\n    data.url = url || null;\n    return this;\n  };\n  /**\n   * Set/Get your feed's TTL.\n   * Used to set `X-PUBLISHED-TTL` and `REFRESH-INTERVAL`.\n   *\n   * @param [ttl] TTL\n   * @example cal.ttl(60 * 60 * 24); // 1 day\n   * @since 0.2.5\n   * @returns {ICalCalendar}\n   */\n\n\n  this.ttl = function (ttl) {\n    if (ttl === undefined) {\n      return data.ttl;\n    }\n\n    data.ttl = parseInt(ttl, 10) || null;\n    return this;\n  };\n  /**\n   * Create a new Event and return the calendar object…\n   *\n   * @param option Event event\n   * @deprecated since 0.2.0\n   * @returns {ICalCalendar}\n   */\n\n\n  this.addEvent = function (event) {\n    if (!event || typeof event !== 'object') {\n      throw 'event is not an object!';\n    } // validation: start\n\n\n    if (!event.start) {\n      throw 'event.start is a mandatory item!';\n    } // validation: summary\n\n\n    if (!event.summary) {\n      throw 'event.summary is a mandatory item!';\n    }\n\n    var ICalEvent = require('./event.js'),\n        e; // update errors to 0.1.x version\n\n\n    try {\n      e = new ICalEvent(event, this);\n    } catch (err) {\n      throw err.replace(/`([\\w.]+)`/i, 'event.$1');\n    }\n\n    data.events.push(e);\n    return this;\n  };\n  /**\n   * Create a new Event and return the event object…\n   *\n   * @param [eventData] Event eventData\n   * @since 0.2.0\n   * @returns {ICalEvent}\n   */\n\n\n  this.createEvent = function (eventData) {\n    var ICalEvent = require('./event.js'),\n        event = new ICalEvent(eventData, this);\n\n    data.events.push(event);\n    return event;\n  };\n  /**\n   * Get all events or add multiple events…\n   *\n   * @since 0.2.0\n   * @returns {ICalEvent[]|ICalCalendar}\n   */\n\n\n  this.events = function (events) {\n    if (!events) {\n      return data.events;\n    }\n\n    var cal = this;\n    events.forEach(function (e) {\n      cal.createEvent(e);\n    });\n    return cal;\n  };\n  /**\n   * Save ical file with `fs.save`\n   *\n   * @param path Filepath\n   * @param [cb] Callback\n   * @returns {ICalCalendar}\n   */\n\n\n  this.save = function (path, cb) {\n    require('fs').writeFile(path, generate(this), cb);\n\n    return this;\n  };\n  /*jslint stupid: true */\n\n  /**\n   * Save ical file with `fs.saveSync`\n   *\n   * @param path Filepath\n   * @returns Number Number of Bytes written\n   */\n\n\n  this.saveSync = function (path) {\n    return require('fs').writeFileSync(path, generate(this));\n  };\n  /*jslint stupid: false */\n\n  /**\n   * Save ical file with `fs.saveSync`\n   *\n   * @param {http.ServerResponse} response Response\n   * @param String [filename] Filename\n   * @returns Number Number of Bytes written\n   */\n\n\n  this.serve = function (response, filename) {\n    response.writeHead(200, {\n      'Content-Type': 'text/calendar; charset=utf-8',\n      'Content-Disposition': 'attachment; filename=\"' + (filename || 'calendar.ics') + '\"'\n    });\n    response.end(generate(this));\n    return this;\n  };\n  /**\n   * Return ical as string…\n   *\n   * @returns String ical\n   */\n\n\n  this.toString = function () {\n    return generate(this);\n  };\n  /**\n   * Export calender as JSON Object to use it later…\n   *\n   * @since 0.2.4\n   * @returns Object Calendar\n   */\n\n\n  this.toJSON = function () {\n    var tools = require('./_tools.js');\n\n    return tools.toJSON(this, attributes);\n  };\n  /**\n   * Get number of events in calendar…\n   *\n   * @returns Number Number of events in calendar\n   */\n\n\n  this.length = function () {\n    return data.events.length;\n  };\n  /**\n   * Reset calendar to default state…\n   *\n   * @returns {ICalCalendar}\n   */\n\n\n  this.clear = function () {\n    data.domain = require('os').hostname();\n    data.prodid = '//sebbo.net//ical-generator//EN';\n    data.method = null;\n    data.name = null;\n    data.timezone = null;\n    data.ttl = null;\n    data.url = null;\n    data.events = [];\n    return this;\n  };\n  /**\n   * Deprecated method, does nothing…\n   *\n   * @deprecated since 0.2.0\n   * @returns {ICalCalendar}\n   */\n\n\n  this.generate = function () {\n    return this;\n  };\n\n  if (typeof _data === 'string') {\n    _data = JSON.parse(_data);\n  }\n\n  this.clear();\n\n  for (i in _data) {\n    if (_data.hasOwnProperty(i) && attributes.indexOf(i) > -1) {\n      this[i](_data[i]);\n    }\n  }\n};\n\nmodule.exports = ICalCalendar;","map":null,"metadata":{},"sourceType":"script"}