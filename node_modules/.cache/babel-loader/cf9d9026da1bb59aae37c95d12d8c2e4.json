{"ast":null,"code":"import { DateFormat } from './intl/date-formatter';\nimport { NumberFormat } from './intl/number-formatter';\nimport { DateParser } from './intl/date-parser';\nimport { NumberParser } from './intl/number-parser';\nimport { IntlBase } from './intl/intl-base';\nimport { extend, getValue, isBlazor } from './util';\nimport { Observer } from './observer';\n/**\r\n * Specifies the observer used for external change detection.\r\n */\n\nexport var onIntlChange = new Observer();\n/**\r\n * Specifies the default rtl status for EJ2 components.\r\n */\n\nexport var rightToLeft = false;\n/**\r\n * Specifies the CLDR data loaded for internationalization functionalities.\r\n * @private\r\n */\n\nexport var cldrData = {};\n/**\r\n * Specifies the default culture value to be considered.\r\n * @private\r\n */\n\nexport var defaultCulture = 'en-US';\n/**\r\n * Specifies default currency code to be considered\r\n * @private\r\n */\n\nexport var defaultCurrencyCode = 'USD';\nvar mapper = ['numericObject', 'dateObject'];\n/**\r\n * Internationalization class provides support to parse and format the number and date object to the desired format.\r\n * ```typescript\r\n * // To set the culture globally\r\n * setCulture('en-GB');\r\n *\r\n * // To set currency code globally\r\n * setCurrencyCode('EUR');\r\n *\r\n * //Load cldr data\r\n * loadCldr(gregorainData);\r\n * loadCldr(timeZoneData);\r\n * loadCldr(numbersData);\r\n * loadCldr(numberSystemData);\r\n *\r\n * // To use formatter in component side\r\n * let Intl:Internationalization = new Internationalization();\r\n *\r\n * // Date formatting\r\n * let dateFormatter: Function = Intl.getDateFormat({skeleton:'long',type:'dateTime'});\r\n * dateFormatter(new Date('11/2/2016'));\r\n * dateFormatter(new Date('25/2/2030'));\r\n * Intl.formatDate(new Date(),{skeleton:'E'});\r\n *\r\n * //Number formatting\r\n * let numberFormatter: Function = Intl.getNumberFormat({skeleton:'C5'})\r\n * numberFormatter(24563334);\r\n * Intl.formatNumber(123123,{skeleton:'p2'});\r\n *\r\n * // Date parser\r\n * let dateParser: Function = Intl.getDateParser({skeleton:'short',type:'time'});\r\n * dateParser('10:30 PM');\r\n * Intl.parseDate('10',{skeleton:'H'});\r\n * ```\r\n */\n\nvar Internationalization =\n/** @class */\nfunction () {\n  function Internationalization(cultureName) {\n    if (cultureName) {\n      this.culture = cultureName;\n    }\n  }\n  /**\r\n   * Returns the format function for given options.\r\n   * @param {DateFormatOptions} options - Specifies the format options in which the format function will return.\r\n   * @returns {Function}\r\n   */\n\n\n  Internationalization.prototype.getDateFormat = function (options) {\n    return DateFormat.dateFormat(this.getCulture(), options || {\n      type: 'date',\n      skeleton: 'short'\n    }, cldrData);\n  };\n  /**\r\n   * Returns the format function for given options.\r\n   * @param {NumberFormatOptions} options - Specifies the format options in which the format function will return.\r\n   * @returns {Function}\r\n   */\n\n\n  Internationalization.prototype.getNumberFormat = function (options) {\n    if (options && !options.currency) {\n      options.currency = defaultCurrencyCode;\n    }\n\n    if (isBlazor() && options && !options.format) {\n      options.minimumFractionDigits = 0;\n    }\n\n    return NumberFormat.numberFormatter(this.getCulture(), options || {}, cldrData);\n  };\n  /**\r\n   * Returns the parser function for given options.\r\n   * @param {DateFormatOptions} options - Specifies the format options in which the parser function will return.\r\n   * @returns {Function}\r\n   */\n\n\n  Internationalization.prototype.getDateParser = function (options) {\n    return DateParser.dateParser(this.getCulture(), options || {\n      skeleton: 'short',\n      type: 'date'\n    }, cldrData);\n  };\n  /**\r\n   * Returns the parser function for given options.\r\n   * @param {NumberFormatOptions} options - Specifies the format options in which the parser function will return.\r\n   * @returns {Function}\r\n   */\n\n\n  Internationalization.prototype.getNumberParser = function (options) {\n    if (isBlazor() && options && !options.format) {\n      options.minimumFractionDigits = 0;\n    }\n\n    return NumberParser.numberParser(this.getCulture(), options || {\n      format: 'N'\n    }, cldrData);\n  };\n  /**\r\n   * Returns the formatted string based on format options.\r\n   * @param {Number} value - Specifies the number to format.\r\n   * @param {NumberFormatOptions} option - Specifies the format options in which the number will be formatted.\r\n   * @returns {string}\r\n   */\n\n\n  Internationalization.prototype.formatNumber = function (value, option) {\n    return this.getNumberFormat(option)(value);\n  };\n  /**\r\n   * Returns the formatted date string based on format options.\r\n   * @param {Number} value - Specifies the number to format.\r\n   * @param {DateFormatOptions} option - Specifies the format options in which the number will be formatted.\r\n   * @returns {string}\r\n   */\n\n\n  Internationalization.prototype.formatDate = function (value, option) {\n    return this.getDateFormat(option)(value);\n  };\n  /**\r\n   * Returns the date object for given date string and options.\r\n   * @param {string} value - Specifies the string to parse.\r\n   * @param {DateFormatOptions} option - Specifies the parse options in which the date string will be parsed.\r\n   * @returns {Date}\r\n   */\n\n\n  Internationalization.prototype.parseDate = function (value, option) {\n    return this.getDateParser(option)(value);\n  };\n  /**\r\n   * Returns the number object from the given string value and options.\r\n   * @param {string} value - Specifies the string to parse.\r\n   * @param {NumberFormatOptions} option - Specifies the parse options in which the  string number  will be parsed.\r\n   * @returns {number}\r\n   */\n\n\n  Internationalization.prototype.parseNumber = function (value, option) {\n    return this.getNumberParser(option)(value);\n  };\n  /**\r\n   * Returns Native Date Time Pattern\r\n   * @param {DateFormatOptions} option - Specifies the parse options for resultant date time pattern.\r\n   * @param {boolean} isExcelFormat - Specifies format value to be converted to excel pattern.\r\n   * @returns {string}\r\n   * @private\r\n   */\n\n\n  Internationalization.prototype.getDatePattern = function (option, isExcelFormat) {\n    return IntlBase.getActualDateTimeFormat(this.getCulture(), option, cldrData, isExcelFormat);\n  };\n  /**\r\n   * Returns Native Number Pattern\r\n   * @param {NumberFormatOptions} option - Specifies the parse options for resultant number pattern.\r\n   * @returns {string}\r\n   * @private\r\n   */\n\n\n  Internationalization.prototype.getNumberPattern = function (option, isExcel) {\n    return IntlBase.getActualNumberFormat(this.getCulture(), option, cldrData, isExcel);\n  };\n  /**\r\n   * Returns the First Day of the Week\r\n   * @returns {number}\r\n   */\n\n\n  Internationalization.prototype.getFirstDayOfWeek = function () {\n    return IntlBase.getWeekData(this.getCulture(), cldrData);\n  };\n\n  Internationalization.prototype.getCulture = function () {\n    return this.culture || defaultCulture;\n  };\n\n  return Internationalization;\n}();\n\nexport { Internationalization };\n/**\r\n * Set the default culture to all EJ2 components\r\n * @param {string} cultureName - Specifies the culture name to be set as default culture.\r\n */\n\nexport function setCulture(cultureName) {\n  defaultCulture = cultureName;\n  onIntlChange.notify('notifyExternalChange', {\n    'locale': defaultCulture\n  });\n}\n/**\r\n * Set the default currency code to all EJ2 components\r\n * @param {string} currencyCode Specifies the culture name to be set as default culture.\r\n * @returns {void}\r\n */\n\nexport function setCurrencyCode(currencyCode) {\n  defaultCurrencyCode = currencyCode;\n  onIntlChange.notify('notifyExternalChange', {\n    'currencyCode': defaultCurrencyCode\n  });\n}\n/**\r\n * Load the CLDR data into context\r\n * @param {Object[]} obj Specifies the CLDR data's to be used for formatting and parser.\r\n * @returns {void}\r\n */\n\nexport function loadCldr() {\n  var data = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    data[_i] = arguments[_i];\n  }\n\n  for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {\n    var obj = data_1[_a];\n    extend(cldrData, obj, {}, true);\n  }\n}\n/**\r\n * To enable or disable RTL functionality for all components globally.\r\n * @param {boolean} status - Optional argument Specifies the status value to enable or disable rtl option.\r\n * @returns {void}\r\n */\n\nexport function enableRtl(status) {\n  if (status === void 0) {\n    status = true;\n  }\n\n  rightToLeft = status;\n  onIntlChange.notify('notifyExternalChange', {\n    enableRtl: rightToLeft\n  });\n}\n/**\r\n * To get the numeric CLDR object for given culture\r\n * @param {string} locale - Specifies the locale for which numericObject to be returned.\r\n * @ignore\r\n * @private\r\n */\n\nexport function getNumericObject(locale, type) {\n  /* tslint:disable no-any */\n  var numObject = IntlBase.getDependables(cldrData, locale, '', true)[mapper[0]];\n  var dateObject = IntlBase.getDependables(cldrData, locale, '')[mapper[1]];\n  var numSystem = getValue('defaultNumberingSystem', numObject);\n  var symbPattern = isBlazor() ? getValue('numberSymbols', numObject) : getValue('symbols-numberSystem-' + numSystem, numObject);\n  var pattern = IntlBase.getSymbolPattern(type || 'decimal', numSystem, numObject, false);\n  return extend(symbPattern, IntlBase.getFormatData(pattern, true, '', true), {\n    'dateSeparator': IntlBase.getDateSeparator(dateObject)\n  });\n}\n/**\r\n * To get the numeric CLDR  number base object for given culture\r\n * @param {string} locale - Specifies the locale for which numericObject to be returned.\r\n * @param {string} currency - Specifies the currency for which numericObject to be returned.\r\n * @ignore\r\n * @private\r\n */\n\nexport function getNumberDependable(locale, currency) {\n  var numObject = IntlBase.getDependables(cldrData, locale, '', true);\n  return IntlBase.getCurrencySymbol(numObject.numericObject, currency);\n}\n/**\r\n * To get the default date CLDR object.\r\n * @ignore\r\n * @private\r\n */\n\nexport function getDefaultDateObject(mode) {\n  return IntlBase.getDependables(cldrData, '', mode, false)[mapper[1]];\n}","map":null,"metadata":{},"sourceType":"module"}