{"ast":null,"code":"import { append, addClass, remove, isNullOrUndefined, setStyleAttribute, createElement } from '@syncfusion/ej2-base';\nimport { isBlazor } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport * as cls from '../base/css-constant';\nimport * as util from '../base/util';\n/**\n * Virtual Scroll\n */\n\nvar VirtualScroll =\n/** @class */\nfunction () {\n  function VirtualScroll(parent) {\n    this.translateY = 0;\n    this.itemSize = 60;\n    this.bufferCount = 3;\n    this.renderedLength = 0;\n    this.averageRowHeight = 0;\n    this.startIndex = 0;\n    this.isScrollHeightNull = true;\n    this.previousTop = 0;\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  VirtualScroll.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(events.virtualScroll, this.virtualScrolling, this);\n  };\n\n  VirtualScroll.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.virtualScroll, this.virtualScrolling);\n  };\n\n  VirtualScroll.prototype.getRenderedCount = function () {\n    if (isBlazor()) {\n      var conTable = this.parent.element.querySelector('.' + cls.CONTENT_TABLE_CLASS);\n      this.renderedLength = conTable.querySelector('tbody').children.length;\n      return this.renderedLength;\n    }\n\n    this.setItemSize();\n    return Math.ceil(this.parent.element.clientHeight / this.itemSize) + this.bufferCount;\n  };\n\n  VirtualScroll.prototype.triggerScrolling = function () {\n    this.parent.showSpinner(); // tslint:disable-next-line:no-any\n\n    var scheduleObj = this.parent;\n    var adaptor = 'interopAdaptor';\n    var invokeMethodAsync = 'invokeMethodAsync';\n    scheduleObj[adaptor][invokeMethodAsync]('OnContentUpdate', this.startIndex);\n  };\n\n  VirtualScroll.prototype.setTranslateValue = function () {\n    var resWrap = this.parent.element.querySelector('.' + cls.RESOURCE_COLUMN_WRAP_CLASS);\n    var conWrap = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);\n    var eventWrap = this.parent.element.querySelector('.' + cls.EVENT_TABLE_CLASS);\n    var timeIndicator = this.parent.element.querySelector('.' + cls.CURRENT_TIMELINE_CLASS);\n    this.renderVirtualTrackHeight(conWrap, resWrap);\n    this.setTranslate(resWrap, conWrap, eventWrap, timeIndicator);\n  };\n\n  VirtualScroll.prototype.renderVirtualTrackHeight = function (contentWrap, resourceWrap) {\n    this.parent.resourceBase.setExpandedResources();\n\n    if (this.isScrollHeightNull) {\n      var wrap = createElement('div', {\n        className: cls.VIRTUAL_TRACK_CLASS\n      });\n      var resWrap = [].slice.call(resourceWrap.querySelectorAll('table td'));\n      var startIndex_1 = parseInt(resWrap[0].getAttribute('data-group-index'), 10);\n      var endIndex_1 = parseInt(resWrap[resWrap.length - 1].getAttribute('data-group-index'), 10);\n      this.parent.resourceBase.renderedResources = this.parent.resourceBase.expandedResources.filter(function (resource) {\n        return resource.groupIndex >= startIndex_1 && resource.groupIndex <= endIndex_1;\n      });\n      this.setItemSize();\n      wrap.style.height = this.parent.resourceBase.expandedResources.length * this.itemSize + 'px';\n      this.isScrollHeightNull = false;\n      var virtual = this.parent.element.querySelector('.' + cls.VIRTUAL_TRACK_CLASS);\n\n      if (!isNullOrUndefined(virtual)) {\n        remove(virtual);\n      }\n\n      contentWrap.appendChild(wrap);\n    }\n  };\n\n  VirtualScroll.prototype.renderVirtualTrack = function (contentWrap) {\n    var wrap = createElement('div', {\n      className: cls.VIRTUAL_TRACK_CLASS\n    });\n    wrap.style.height = this.parent.resourceBase.expandedResources.length * this.itemSize + 'px';\n    contentWrap.appendChild(wrap);\n  };\n\n  VirtualScroll.prototype.updateVirtualScrollHeight = function () {\n    var virtual = this.parent.element.querySelector('.' + cls.VIRTUAL_TRACK_CLASS);\n    var lastResourceIndex = this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1].groupIndex;\n    var lastRenderIndex = this.parent.resourceBase.renderedResources[this.parent.resourceBase.renderedResources.length - 1].groupIndex;\n\n    if (lastRenderIndex !== lastResourceIndex || isBlazor()) {\n      var conTable = this.parent.element.querySelector('.' + cls.CONTENT_TABLE_CLASS);\n      this.renderedLength = conTable.querySelector('tbody').children.length;\n      virtual.style.height = conTable.offsetHeight + (this.parent.resourceBase.expandedResources.length - this.renderedLength) * conTable.offsetHeight / this.renderedLength + 'px';\n    } else {\n      virtual.style.height = '';\n    }\n\n    this.averageRowHeight = virtual.offsetHeight / this.parent.resourceBase.expandedResources.length;\n  };\n\n  VirtualScroll.prototype.updateVirtualTrackHeight = function (wrap) {\n    var resourceCount = this.parent.resourceBase.renderedResources.length;\n\n    if (resourceCount !== this.getRenderedCount()) {\n      wrap.style.height = this.parent.element.querySelector('.e-content-wrap').clientHeight + 'px';\n      var resWrap = this.parent.element.querySelector('.' + cls.RESOURCE_COLUMN_WRAP_CLASS);\n      var conWrap = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);\n      var eventWrap = this.parent.element.querySelector('.' + cls.EVENT_TABLE_CLASS);\n      this.translateY = 0;\n      this.setTranslate(resWrap, conWrap, eventWrap);\n    } else {\n      var lastRenderIndex = this.parent.resourceBase.renderedResources[resourceCount - 1].groupIndex;\n      var lastCollIndex = this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1].groupIndex;\n      var renderedResConut = resourceCount + (lastCollIndex - lastRenderIndex);\n      renderedResConut = renderedResConut > this.parent.resourceBase.expandedResources.length ? this.parent.resourceBase.expandedResources.length : renderedResConut;\n      wrap.style.height = renderedResConut * this.itemSize + 'px';\n    }\n  };\n\n  VirtualScroll.prototype.setItemSize = function () {\n    this.itemSize = util.getElementHeightFromClass(this.parent.activeView.element, cls.WORK_CELLS_CLASS) || this.itemSize;\n  };\n\n  VirtualScroll.prototype.beforeInvoke = function (resWrap, conWrap, eventWrap, timeIndicator) {\n    var _this = this;\n\n    if (isBlazor()) {\n      window.clearTimeout(this.timeValue);\n      this.timeValue = window.setTimeout(function () {\n        _this.triggerScrolling();\n      }, 250);\n      this.setTranslate(resWrap, conWrap, eventWrap, timeIndicator);\n      this.previousTop = conWrap.scrollTop;\n    }\n  };\n\n  VirtualScroll.prototype.virtualScrolling = function () {\n    var _this = this;\n\n    this.parent.quickPopup.quickPopupHide();\n    this.parent.quickPopup.morePopup.hide();\n    var resWrap = this.parent.element.querySelector('.' + cls.RESOURCE_COLUMN_WRAP_CLASS);\n    var conWrap = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);\n    var eventWrap = this.parent.element.querySelector('.' + cls.EVENT_TABLE_CLASS);\n    var timeIndicator = this.parent.element.querySelector('.' + cls.CURRENT_TIMELINE_CLASS);\n    var conTable = this.parent.element.querySelector('.' + cls.CONTENT_TABLE_CLASS);\n    this.renderedLength = resWrap.querySelector('tbody').children.length;\n    var firstTDIndex = parseInt(resWrap.querySelector('tbody td').getAttribute('data-group-index'), 10);\n    var scrollHeight = this.parent.rowAutoHeight ? conTable.offsetHeight - conWrap.offsetHeight : this.bufferCount * this.itemSize;\n    addClass([conWrap], 'e-transition');\n\n    if (isBlazor()) {\n      this.setItemSize();\n    }\n\n    var resCollection = [];\n\n    if (conWrap.scrollTop - this.translateY < 0) {\n      resCollection = this.upScroll(conWrap, firstTDIndex);\n      this.beforeInvoke(resWrap, conWrap, eventWrap, timeIndicator);\n    } else if (conWrap.scrollTop - this.translateY > scrollHeight) {\n      resCollection = this.downScroll(conWrap, firstTDIndex);\n\n      if (!(this.previousTop === conWrap.scrollTop)) {\n        this.beforeInvoke(resWrap, conWrap, eventWrap, timeIndicator);\n      }\n    }\n\n    if (!isBlazor()) {\n      if (!isNullOrUndefined(resCollection) && resCollection.length > 0) {\n        this.parent.showSpinner();\n        this.updateContent(resWrap, conWrap, eventWrap, resCollection);\n        this.setTranslate(resWrap, conWrap, eventWrap, timeIndicator);\n        this.parent.notify(events.dataReady, {});\n\n        if (this.parent.dragAndDropModule && this.parent.dragAndDropModule.actionObj.action === 'drag') {\n          this.parent.dragAndDropModule.navigationWrapper();\n        }\n\n        window.clearTimeout(this.timeValue);\n        this.timeValue = window.setTimeout(function () {\n          _this.parent.hideSpinner();\n        }, 250);\n      }\n    }\n  };\n\n  VirtualScroll.prototype.upScroll = function (conWrap, firstTDIndex) {\n    var index = 0;\n\n    if (isBlazor()) {\n      index = ~~(conWrap.scrollTop / this.itemSize);\n    } else {\n      index = ~~(conWrap.scrollTop / this.itemSize) + Math.ceil(conWrap.clientHeight / this.itemSize) - this.renderedLength;\n    }\n\n    if (this.parent.rowAutoHeight) {\n      index = index > firstTDIndex ? firstTDIndex - this.bufferCount : index;\n    }\n\n    index = index > 0 ? index : 0;\n    var prevSetCollection = this.getBufferCollection(index, index + this.renderedLength);\n    this.parent.resourceBase.renderedResources = prevSetCollection;\n\n    if (firstTDIndex === 0) {\n      this.translateY = conWrap.scrollTop;\n    } else {\n      var height = this.parent.rowAutoHeight ? this.averageRowHeight : this.itemSize;\n      this.translateY = conWrap.scrollTop - this.bufferCount * height > 0 ? conWrap.scrollTop - this.bufferCount * height : 0;\n    }\n\n    if (isBlazor()) {\n      this.startIndex = index;\n    }\n\n    return prevSetCollection;\n  };\n\n  VirtualScroll.prototype.downScroll = function (conWrap, firstTDIndex) {\n    var lastResource = this.parent.resourceBase.renderedResources[this.parent.resourceBase.renderedResources.length - 1].groupIndex;\n    var lastResourceIndex = this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1].groupIndex;\n\n    if (lastResource === lastResourceIndex) {\n      return null;\n    }\n\n    var nextSetResIndex = 0;\n    var height = this.parent.rowAutoHeight ? this.averageRowHeight : this.itemSize;\n\n    if (isBlazor()) {\n      nextSetResIndex = ~~(conWrap.scrollTop / height);\n    } else {\n      nextSetResIndex = ~~(conWrap.scrollTop / this.itemSize);\n\n      if (this.parent.rowAutoHeight) {\n        nextSetResIndex = ~~((conWrap.scrollTop - this.translateY) / this.averageRowHeight) + firstTDIndex;\n        nextSetResIndex = nextSetResIndex > firstTDIndex + this.bufferCount ? nextSetResIndex : firstTDIndex + this.bufferCount;\n      }\n    }\n\n    var lastIndex = nextSetResIndex + this.renderedLength;\n    lastIndex = lastIndex > this.parent.resourceBase.expandedResources.length ? nextSetResIndex + (this.parent.resourceBase.expandedResources.length - nextSetResIndex) : lastIndex;\n    var nextSetCollection = this.getBufferCollection(lastIndex - this.renderedLength, lastIndex);\n    this.translateY = conWrap.scrollTop;\n\n    if (isBlazor()) {\n      if (this.translateY > this.parent.resourceBase.expandedResources.length * height - this.renderedLength * height) {\n        this.translateY = this.parent.resourceBase.expandedResources.length * height - this.renderedLength * height;\n      }\n\n      this.startIndex = lastIndex - this.renderedLength;\n      this.parent.resourceBase.renderedResources = nextSetCollection;\n    }\n\n    return nextSetCollection;\n  };\n\n  VirtualScroll.prototype.updateContent = function (resWrap, conWrap, eventWrap, resCollection) {\n    var renderedLenth = resWrap.querySelector('tbody').children.length;\n\n    for (var i = 0; i < renderedLenth; i++) {\n      remove(resWrap.querySelector('tbody tr'));\n      remove(conWrap.querySelector('tbody tr'));\n      remove(eventWrap.querySelector('div'));\n    }\n\n    this.parent.resourceBase.renderedResources = resCollection;\n    var resourceRows = this.parent.resourceBase.getContentRows(resCollection);\n    var contentRows = this.parent.activeView.getContentRows();\n    var eventRows = this.parent.activeView.getEventRows(resCollection.length);\n    append(resourceRows, resWrap.querySelector('tbody'));\n    append(contentRows, conWrap.querySelector('tbody'));\n    append(eventRows, eventWrap);\n  };\n\n  VirtualScroll.prototype.getBufferCollection = function (startIndex, endIndex) {\n    return this.parent.resourceBase.expandedResources.slice(startIndex, endIndex);\n  };\n\n  VirtualScroll.prototype.setTranslate = function (resWrap, conWrap, eventWrap, timeIndicator) {\n    setStyleAttribute(resWrap.querySelector('table'), {\n      transform: \"translateY(\" + this.translateY + \"px)\"\n    });\n    setStyleAttribute(conWrap.querySelector('table'), {\n      transform: \"translateY(\" + this.translateY + \"px)\"\n    });\n    setStyleAttribute(eventWrap, {\n      transform: \"translateY(\" + this.translateY + \"px)\"\n    });\n\n    if (!isNullOrUndefined(timeIndicator)) {\n      setStyleAttribute(timeIndicator, {\n        transform: \"translateY(\" + this.translateY + \"px)\"\n      });\n    }\n  };\n\n  VirtualScroll.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  return VirtualScroll;\n}();\n\nexport { VirtualScroll };","map":null,"metadata":{},"sourceType":"module"}