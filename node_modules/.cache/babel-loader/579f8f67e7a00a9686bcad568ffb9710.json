{"ast":null,"code":"/**\r\n * Functions related to dom operations.\r\n */\nimport { EventHandler } from './event-handler';\nimport { isNullOrUndefined, getValue, setValue, isObject, extend } from './util';\nimport { VirtualDOM } from './virtual-dom';\nvar SVG_REG = /^svg|^path|^g/;\n/**\r\n * Function to create Html element.\r\n * @param tagName - Name of the tag, id and class names.\r\n * @param properties - Object to set properties in the element.\r\n * @param properties.id - To set the id to the created element.\r\n * @param properties.className - To add classes to the element.\r\n * @param properties.innerHTML - To set the innerHTML to element.\r\n * @param properties.styles - To set the some custom styles to element.\r\n * @param properties.attrs - To set the attributes to element.\r\n * @private\r\n */\n\nexport function createElement(tagName, properties) {\n  //tslint:disable-next-line\n  var element = SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName);\n\n  if (typeof properties === 'undefined') {\n    return element;\n  }\n\n  element.innerHTML = properties.innerHTML ? properties.innerHTML : '';\n\n  if (properties.className !== undefined) {\n    element.className = properties.className;\n  }\n\n  if (properties.id !== undefined) {\n    element.id = properties.id;\n  }\n\n  if (properties.styles !== undefined) {\n    element.setAttribute('style', properties.styles);\n  }\n\n  if (properties.attrs !== undefined) {\n    attributes(element, properties.attrs);\n  }\n\n  return element;\n}\n/**\r\n * The function used to add the classes to array of elements\r\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\r\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\r\n * @private\r\n */\n\nexport function addClass(elements, classes) {\n  var classList = getClassList(classes);\n\n  for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n\n    for (var _b = 0, classList_1 = classList; _b < classList_1.length; _b++) {\n      var className = classList_1[_b];\n\n      if (isObject(ele)) {\n        var curClass = getValue('attributes.className', ele);\n\n        if (isNullOrUndefined(curClass)) {\n          setValue('attributes.className', className, ele);\n        } else if (!new RegExp('\\\\b' + className + '\\\\b', 'i').test(curClass)) {\n          setValue('attributes.className', curClass + ' ' + className, ele);\n        }\n      } else {\n        if (!ele.classList.contains(className)) {\n          ele.classList.add(className);\n        }\n      }\n    }\n  }\n\n  return elements;\n}\n/**\r\n * The function used to add the classes to array of elements\r\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\r\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\r\n * @private\r\n */\n\nexport function removeClass(elements, classes) {\n  var classList = getClassList(classes);\n\n  for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n    var flag = isObject(ele);\n    var canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';\n\n    if (canRemove) {\n      for (var _b = 0, classList_2 = classList; _b < classList_2.length; _b++) {\n        var className = classList_2[_b];\n\n        if (flag) {\n          var classes_1 = getValue('attributes.className', ele);\n          var classArr = classes_1.split(' ');\n          var index = classArr.indexOf(className);\n\n          if (index !== -1) {\n            classArr.splice(index, 1);\n          }\n\n          setValue('attributes.className', classArr.join(' '), ele);\n        } else {\n          ele.classList.remove(className);\n        }\n      }\n    }\n  }\n\n  return elements;\n}\n\nfunction getClassList(classes) {\n  var classList = [];\n\n  if (typeof classes === 'string') {\n    classList.push(classes);\n  } else {\n    classList = classes;\n  }\n\n  return classList;\n}\n/**\r\n * The function used to check element is visible or not.\r\n * @param  {Element|Node} element - An element the need to check visibility\r\n * @private\r\n */\n\n\nexport function isVisible(element) {\n  var ele = element;\n  return ele.style.visibility === '' && ele.offsetWidth > 0;\n}\n/**\r\n * The function used to insert an array of elements into a first of the element.\r\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\r\n * @param  {Element} toElement - An element that is going to prepend.\r\n * @private\r\n */\n\nexport function prepend(fromElements, toElement, isEval) {\n  //tslint:disable:no-any\n  if (isObject(toElement)) {\n    VirtualDOM.prepend(fromElements, toElement);\n  } else {\n    var docFrag = document.createDocumentFragment();\n\n    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n      var ele = _a[_i];\n      docFrag.appendChild(ele);\n    }\n\n    toElement.insertBefore(docFrag, toElement.firstElementChild);\n\n    if (isEval) {\n      executeScript(toElement);\n    }\n  }\n\n  return fromElements;\n}\n/**\r\n * The function used to insert an array of elements into last of the element.\r\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\r\n * @param  {Element} toElement - An element that is going to prepend.\r\n * @private\r\n */\n\nexport function append(fromElements, toElement, isEval) {\n  if (isObject(toElement)) {\n    VirtualDOM.append(fromElements, toElement);\n  } else {\n    var docFrag = document.createDocumentFragment();\n\n    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n      var ele = _a[_i];\n      docFrag.appendChild(ele);\n    }\n\n    toElement.appendChild(docFrag);\n\n    if (isEval) {\n      executeScript(toElement);\n    }\n  }\n\n  return fromElements;\n} //tslint: enable:no-any\n\n/**\r\n * The function is used to evaluate script from Ajax request\r\n * @param ele - An element is going to evaluate the script\r\n */\n\nfunction executeScript(ele) {\n  var eleArray = ele.querySelectorAll('script');\n  eleArray.forEach(function (element) {\n    var script = document.createElement('script');\n    script.text = element.innerHTML;\n    document.head.appendChild(script);\n    detach(script);\n  });\n}\n/**\r\n * The function used to remove the element from the\r\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\r\n * @private\r\n */\n\n\nexport function detach(element) {\n  if (isObject(element)) {\n    return VirtualDOM.detach(element);\n  } else {\n    var parentNode = element.parentNode;\n    return parentNode.removeChild(element);\n  }\n}\n/**\r\n * The function used to remove the element from Dom also clear the bounded events\r\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\r\n * @private\r\n */\n\nexport function remove(element) {\n  if (isObject(element)) {\n    VirtualDOM.detach(element);\n  } else {\n    var parentNode = element.parentNode;\n    EventHandler.clearEvents(element);\n    parentNode.removeChild(element);\n  }\n}\n/**\r\n * The function helps to set multiple attributes to an element\r\n * @param  {Element|Node} element - An element that need to set attributes.\r\n * @param  {{[key:string]:string}} attributes - JSON Object that is going to as attributes.\r\n * @private\r\n */\n\nexport function attributes(element, attributes) {\n  var keys = Object.keys(attributes);\n  var ele = element;\n\n  for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n    var key = keys_1[_i];\n\n    if (isObject(ele)) {\n      var iKey = key;\n\n      if (key === 'tabindex') {\n        iKey = 'tabIndex';\n      }\n\n      ele.attributes[iKey] = attributes[key];\n    } else {\n      ele.setAttribute(key, attributes[key]);\n    }\n  }\n\n  return ele;\n}\n/**\r\n * The function selects the element from giving context.\r\n * @param  {string} selector - Selector string need fetch element from the\r\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\r\n * @private\r\n */\n//tslint:disable-next-line\n\nexport function select(selector, context, needsVDOM) {\n  if (context === void 0) {\n    context = document;\n  }\n\n  if (isObject(context) && needsVDOM) {\n    //tslint:disable-next-line\n    return VirtualDOM.vDomSelector({\n      ele: context,\n      selector: selector,\n      selectAll: false\n    });\n  } else {\n    return context.querySelector(selector);\n  }\n}\n/**\r\n * The function selects an array of element from the given context.\r\n * @param  {string} selector - Selector string need fetch element from the\r\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\r\n * @private\r\n */\n\nexport function selectAll(selector, context, needsVDOM) {\n  if (context === void 0) {\n    context = document;\n  }\n\n  if (isObject(context) && !needsVDOM) {\n    //tslint:disable-next-line\n    return VirtualDOM.vDomSelector({\n      ele: context,\n      selector: selector,\n      selectAll: true\n    });\n  } else {\n    var nodeList = context.querySelectorAll(selector);\n    return nodeList;\n  }\n}\n/**\r\n * Returns single closest parent element based on class selector.\r\n * @param  {Element} element - An element that need to find the closest element.\r\n * @param  {string} selector - A classSelector of closest element.\r\n * @private\r\n */\n\nexport function closest(element, selector) {\n  var el = element;\n\n  if (typeof el.closest === 'function') {\n    return el.closest(selector);\n  }\n\n  while (el && el.nodeType === 1) {\n    if (matches(el, selector)) {\n      return el;\n    }\n\n    el = el.parentNode;\n  }\n\n  return null;\n}\n/**\r\n * Returns all sibling elements of the given element.\r\n * @param  {Element|Node} element - An element that need to get siblings.\r\n * @private\r\n */\n\nexport function siblings(element) {\n  var siblings = [];\n  var childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n\n  for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {\n    var curNode = childNodes_1[_i];\n\n    if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n      siblings.push(curNode);\n    }\n  }\n\n  return siblings;\n}\n/**\r\n * set the value if not exist. Otherwise set the existing value\r\n * @param  {HTMLElement} element - An element to which we need to set value.\r\n * @param  {string} property - Property need to get or set.\r\n * @param  {string} value - value need to set.\r\n * @private\r\n */\n\nexport function getAttributeOrDefault(element, property, value) {\n  var attrVal;\n  var isObj = isObject(element);\n\n  if (isObj) {\n    attrVal = getValue('attributes.' + property, element);\n  } else {\n    attrVal = element.getAttribute(property);\n  }\n\n  if (isNullOrUndefined(attrVal) && value) {\n    if (!isObj) {\n      element.setAttribute(property, value.toString());\n    } else {\n      element.attributes[property] = value;\n    }\n\n    attrVal = value;\n  }\n\n  return attrVal;\n}\n/**\r\n * Set the style attributes to Html element.\r\n * @param {HTMLElement} element - Element which we want to set attributes\r\n * @param {any} attrs - Set the given attributes to element\r\n * @return {void}\r\n * @private\r\n */\n\nexport function setStyleAttribute(element, attrs) {\n  if (attrs !== undefined) {\n    if (isObject(element)) {\n      // tslint:disable-next-line:no-any\n      VirtualDOM.setStyleAttribute(element, attrs);\n    } else {\n      Object.keys(attrs).forEach(function (key) {\n        // tslint:disable-next-line:no-any\n        element.style[key] = attrs[key];\n      });\n    }\n  }\n}\n/**\r\n * Method for add and remove classes to a dom element.\r\n * @param {Element} element - Element for add and remove classes\r\n * @param {string[]} addClasses - List of classes need to be add to the element\r\n * @param {string[]} removeClasses - List of classes need to be remove from the element\r\n * @return {void}\r\n * @private\r\n */\n\nexport function classList(element, addClasses, removeClasses) {\n  addClass([element], addClasses);\n  removeClass([element], removeClasses);\n}\n/**\r\n * Method to check whether the element matches the given selector.\r\n * @param {Element} element - Element to compare with the selector.\r\n * @param {string} selector - String selector which element will satisfy.\r\n * @return {void}\r\n * @private\r\n */\n\nexport function matches(element, selector) {\n  //tslint:disable-next-line\n  var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n\n  if (matches) {\n    return matches.call(element, selector);\n  } else {\n    return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n  }\n}\nexport function includeInnerHTML(ele, innerHTML) {\n  if (isObject(ele)) {\n    if (innerHTML === '') {\n      ele.children = [];\n    } else {\n      var res = VirtualDOM.ConvertHTMLToJSon(innerHTML);\n\n      if (res.length) {\n        VirtualDOM.assignParent(res, ele);\n        ele.children = res;\n      }\n    }\n  } else {\n    ele.innerHTML = innerHTML;\n  }\n} //tslint:disable-next-line\n\nexport function containsClass(ele, className) {\n  if (isObject(ele)) {\n    // tslint:disable-next-line:no-any\n    return new RegExp('\\\\b' + className + '\\\\b', 'i').test(ele.attributes.className);\n  } else {\n    return ele.classList.contains(className);\n  }\n}\n/**\r\n * Method to check whether the element matches the given selector.\r\n * @param {} element - Element to compare with the selector.\r\n * @param {string} selector - String selector which element will satisfy.\r\n * @return {Element | VirtualObject}\r\n * @private\r\n */\n//tslint:disable:no-any\n\nexport function cloneNode(element, deep) {\n  if (isObject(element)) {\n    if (deep) {\n      return extend({}, {}, element, true);\n    } else {\n      return {\n        tagName: element.tagName,\n        attributes: element.attributes\n      };\n    }\n  } else {\n    return element.cloneNode(deep);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}