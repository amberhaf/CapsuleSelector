{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDnd = require('react-dnd');\n\nvar _reactDndHtml5Backend = require('react-dnd-html5-backend');\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _compose = require('./compose');\n\nvar _compose2 = _interopRequireDefault(_compose);\n\nvar _propTypes3 = require('../../utils/propTypes');\n\nvar _accessors = require('../../utils/accessors');\n\nvar _index = require('../../index');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar DraggableEventWrapper = function (_React$Component) {\n  _inherits(DraggableEventWrapper, _React$Component);\n\n  function DraggableEventWrapper() {\n    _classCallCheck(this, DraggableEventWrapper);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  DraggableEventWrapper.prototype.componentDidMount = function componentDidMount() {\n    // this is needed to prevent the backend from\n    // screenshot'ing the event during a resize which\n    // would be very confusing visually\n    var emptyImage = (0, _reactDndHtml5Backend.getEmptyImage)();\n    var previewOptions = {\n      captureDraggingState: true\n    };\n    this.props.connectTopDragPreview(emptyImage, previewOptions);\n    this.props.connectBottomDragPreview(emptyImage, previewOptions);\n    this.props.connectLeftDragPreview(emptyImage, previewOptions);\n    this.props.connectRightDragPreview(emptyImage, previewOptions);\n  };\n\n  DraggableEventWrapper.prototype.render = function render() {\n    var components = this.context.components;\n    var EventWrapper = components.eventWrapper || _index2.default.components.eventWrapper;\n    var _props = this.props,\n        connectDragSource = _props.connectDragSource,\n        connectTopDragSource = _props.connectTopDragSource,\n        connectBottomDragSource = _props.connectBottomDragSource,\n        connectLeftDragSource = _props.connectLeftDragSource,\n        connectRightDragSource = _props.connectRightDragSource,\n        isDragging = _props.isDragging,\n        isResizing = _props.isResizing,\n        children = _props.children,\n        event = _props.event,\n        allDay = _props.allDay,\n        isRow = _props.isRow,\n        continuesPrior = _props.continuesPrior,\n        continuesAfter = _props.continuesAfter;\n    var _context = this.context,\n        draggableAccessor = _context.draggableAccessor,\n        resizableAccessor = _context.resizableAccessor;\n    var isDraggable = draggableAccessor ? !!(0, _accessors.accessor)(event, draggableAccessor) : true;\n    /* Event is not draggable, no need to wrap it */\n\n    if (!isDraggable) {\n      return children;\n    }\n\n    var StartAnchor = null,\n        EndAnchor = null;\n    /*\n     * The resizability of events depends on whether they are\n     * allDay events and how they are displayed.\n     *\n     * 1. If the event is being shown in an event row (because\n     * it is an allDay event shown in the header row or because as\n     * in month view the view is showing all events as rows) then we\n     * allow east-west resizing.\n     *\n     * 2. Otherwise the event is being displayed\n     * normally, we can drag it north-south to resize the times.\n     *\n     * See `DropWrappers` for handling of the drop of such events.\n     *\n     * Notwithstanding the above, we never show drag anchors for\n     * events which continue beyond current component. This happens\n     * in the middle of events when showMultiDay is true, and to\n     * events at the edges of the calendar's min/max location.\n     */\n\n    var isResizable = resizableAccessor ? !!(0, _accessors.accessor)(event, resizableAccessor) : true;\n\n    if (isResizable) {\n      if (isRow || allDay) {\n        var anchor = _react2.default.createElement('div', {\n          className: 'rbc-addons-dnd-resize-ew-anchor'\n        }, _react2.default.createElement('div', {\n          className: 'rbc-addons-dnd-resize-ew-icon'\n        }));\n\n        StartAnchor = !continuesPrior && connectLeftDragSource(anchor);\n        EndAnchor = !continuesAfter && connectRightDragSource(anchor);\n      } else {\n        var _anchor = _react2.default.createElement('div', {\n          className: 'rbc-addons-dnd-resize-ns-anchor'\n        }, _react2.default.createElement('div', {\n          className: 'rbc-addons-dnd-resize-ns-icon'\n        }));\n\n        StartAnchor = !continuesPrior && connectTopDragSource(_anchor);\n        EndAnchor = !continuesAfter && connectBottomDragSource(_anchor);\n      }\n      /*\n      * props.children is the singular <Event> component.\n      * BigCalendar positions the Event abolutely and we\n      * need the anchors to be part of that positioning.\n      * So we insert the anchors inside the Event's children\n      * rather than wrap the Event here as the latter approach\n      * would lose the positioning.\n      */\n\n\n      var childrenWithAnchors = _react2.default.createElement('div', {\n        className: 'rbc-addons-dnd-resizable'\n      }, StartAnchor, children.props.children, EndAnchor);\n\n      children = _react2.default.cloneElement(children, {\n        className: (0, _classnames2.default)(children.props.className, isDragging && 'rbc-addons-dnd-dragging', isResizing && 'rbc-addons-dnd-resizing'),\n        children: childrenWithAnchors // replace original event child with anchor-embellished child\n\n      });\n    }\n\n    return _react2.default.createElement(EventWrapper, {\n      event: event,\n      allDay: allDay\n    }, connectDragSource(children));\n  };\n\n  return DraggableEventWrapper;\n}(_react2.default.Component);\n/* drag sources */\n\n\nDraggableEventWrapper.contextTypes = {\n  components: _propTypes2.default.object,\n  draggableAccessor: _propTypes3.accessor,\n  resizableAccessor: _propTypes3.accessor\n};\nDraggableEventWrapper.propTypes = {\n  event: _propTypes2.default.object.isRequired,\n  connectDragSource: _propTypes2.default.func.isRequired,\n  connectTopDragPreview: _propTypes2.default.func.isRequired,\n  connectTopDragSource: _propTypes2.default.func.isRequired,\n  connectBottomDragPreview: _propTypes2.default.func.isRequired,\n  connectBottomDragSource: _propTypes2.default.func.isRequired,\n  connectLeftDragPreview: _propTypes2.default.func.isRequired,\n  connectLeftDragSource: _propTypes2.default.func.isRequired,\n  connectRightDragPreview: _propTypes2.default.func.isRequired,\n  connectRightDragSource: _propTypes2.default.func.isRequired,\n  draggable: _propTypes2.default.bool,\n  allDay: _propTypes2.default.bool,\n  isRow: _propTypes2.default.bool,\n  continuesPrior: _propTypes2.default.bool,\n  continuesAfter: _propTypes2.default.bool,\n  isDragging: _propTypes2.default.bool,\n  isResizing: _propTypes2.default.bool\n};\n\nvar makeEventSource = function makeEventSource(anchor) {\n  return {\n    beginDrag: function beginDrag(_ref) {\n      var event = _ref.event;\n      return {\n        event: event,\n        anchor: anchor\n      };\n    } //canDrag: ({ event }) => true, // support per-event dragability/sizability\n\n  };\n};\n\nexports.default = (0, _compose2.default)((0, _reactDnd.DragSource)('event', makeEventSource('drop'), function (connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n}), (0, _reactDnd.DragSource)('event', makeEventSource('resizeTop'), function (connect, monitor) {\n  return {\n    connectTopDragSource: connect.dragSource(),\n    connectTopDragPreview: connect.dragPreview(),\n    isResizing: monitor.isDragging()\n  };\n}), (0, _reactDnd.DragSource)('event', makeEventSource('resizeBottom'), function (connect, monitor) {\n  return {\n    connectBottomDragSource: connect.dragSource(),\n    connectBottomDragPreview: connect.dragPreview(),\n    isResizing: monitor.isDragging()\n  };\n}), (0, _reactDnd.DragSource)('event', makeEventSource('resizeLeft'), function (connect, monitor) {\n  return {\n    connectLeftDragSource: connect.dragSource(),\n    connectLeftDragPreview: connect.dragPreview(),\n    isResizing: monitor.isDragging()\n  };\n}), (0, _reactDnd.DragSource)('event', makeEventSource('resizeRight'), function (connect, monitor) {\n  return {\n    connectRightDragSource: connect.dragSource(),\n    connectRightDragPreview: connect.dragPreview(),\n    isResizing: monitor.isDragging()\n  };\n}))(DraggableEventWrapper);\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}