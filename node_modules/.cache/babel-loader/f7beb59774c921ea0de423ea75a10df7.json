{"ast":null,"code":"import { isNullOrUndefined, merge } from './util';\nvar headerRegex = /^(.*?):[ \\t]*([^\\r\\n]*)$/gm;\nvar defaultType = 'GET';\n/**\r\n * Ajax class provides ability to make asynchronous HTTP request to the server\r\n * ```typescript\r\n *   var ajax = new Ajax(\"index.html\", \"GET\", true);\r\n *   ajax.send().then(\r\n *               function (value) {\r\n *                   console.log(value);\r\n *               },\r\n *               function (reason) {\r\n *                   console.log(reason);\r\n *               });\r\n * ```\r\n */\n\nvar Ajax =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor for Ajax class\r\n   * @param  {string|Object} options?\r\n   * @param  {string} type?\r\n   * @param  {boolean} async?\r\n   * @returns defaultType\r\n   */\n  function Ajax(options, type, async, contentType) {\n    /**\r\n     * A boolean value indicating whether the request should be sent asynchronous or not.\r\n     * @default true\r\n     */\n    this.mode = true;\n    /**\r\n     * A boolean value indicating whether to ignore the promise reject.\r\n     * @private\r\n     * @default true\r\n     */\n\n    this.emitError = true;\n    this.options = {};\n\n    if (typeof options === 'string') {\n      this.url = options;\n      this.type = type ? type.toUpperCase() : defaultType;\n      this.mode = !isNullOrUndefined(async) ? async : true;\n    } else if (typeof options === 'object') {\n      this.options = options;\n      merge(this, this.options);\n    }\n\n    this.type = this.type ? this.type.toUpperCase() : defaultType;\n    this.contentType = this.contentType !== undefined ? this.contentType : contentType;\n  }\n  /**\r\n   * Send the request to server.\r\n   * @param {any} data - To send the user data\r\n   * @return {Promise}\r\n   */\n\n\n  Ajax.prototype.send = function (data) {\n    var _this = this;\n\n    this.data = isNullOrUndefined(data) ? this.data : data;\n    var eventArgs = {\n      cancel: false,\n      httpRequest: null\n    };\n    var promise = new Promise(function (resolve, reject) {\n      _this.httpRequest = new XMLHttpRequest();\n\n      _this.httpRequest.onreadystatechange = function () {\n        _this.stateChange(resolve, reject);\n      };\n\n      if (!isNullOrUndefined(_this.onLoad)) {\n        _this.httpRequest.onload = _this.onLoad;\n      }\n\n      if (!isNullOrUndefined(_this.onProgress)) {\n        _this.httpRequest.onprogress = _this.onProgress;\n      }\n      /* istanbul ignore next */\n\n\n      if (!isNullOrUndefined(_this.onAbort)) {\n        _this.httpRequest.onabort = _this.onAbort;\n      }\n      /* istanbul ignore next */\n\n\n      if (!isNullOrUndefined(_this.onError)) {\n        _this.httpRequest.onerror = _this.onError;\n      } //** Upload Events **/\n\n      /* istanbul ignore next */\n\n\n      if (!isNullOrUndefined(_this.onUploadProgress)) {\n        _this.httpRequest.upload.onprogress = _this.onUploadProgress;\n      }\n\n      _this.httpRequest.open(_this.type, _this.url, _this.mode); // Set default headers\n\n\n      if (!isNullOrUndefined(_this.data) && _this.contentType !== null) {\n        _this.httpRequest.setRequestHeader('Content-Type', _this.contentType || 'application/json; charset=utf-8');\n      }\n\n      if (_this.beforeSend) {\n        eventArgs.httpRequest = _this.httpRequest;\n\n        _this.beforeSend(eventArgs);\n      }\n\n      if (!eventArgs.cancel) {\n        _this.httpRequest.send(!isNullOrUndefined(_this.data) ? _this.data : null);\n      }\n    });\n    return promise;\n  };\n\n  Ajax.prototype.successHandler = function (data) {\n    if (this.onSuccess) {\n      this.onSuccess(data, this);\n    }\n\n    return data;\n  };\n\n  Ajax.prototype.failureHandler = function (reason) {\n    if (this.onFailure) {\n      this.onFailure(this.httpRequest);\n    }\n\n    return reason;\n  };\n\n  Ajax.prototype.stateChange = function (resolve, reject) {\n    var data = this.httpRequest.responseText;\n\n    if (this.dataType && this.dataType.toLowerCase() === 'json') {\n      if (data === '') {\n        data = undefined;\n      } else {\n        try {\n          data = JSON.parse(data);\n        } catch (error) {// no exception handle\n        }\n      }\n    }\n\n    if (this.httpRequest.readyState === 4) {\n      //success range should be 200 to 299\n      if (this.httpRequest.status >= 200 && this.httpRequest.status <= 299 || this.httpRequest.status === 304) {\n        resolve(this.successHandler(data));\n      } else {\n        if (this.emitError) {\n          reject(new Error(this.failureHandler(this.httpRequest.statusText)));\n        } else {\n          resolve();\n        }\n      }\n    }\n  };\n  /**\r\n   * To get the response header from XMLHttpRequest\r\n   * @param  {string} key Key to search in the response header\r\n   * @returns {string}\r\n   */\n\n\n  Ajax.prototype.getResponseHeader = function (key) {\n    var responseHeaders;\n    var header;\n    responseHeaders = {};\n    var headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());\n\n    while (headers) {\n      responseHeaders[headers[1].toLowerCase()] = headers[2];\n      headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());\n    }\n\n    header = responseHeaders[key.toLowerCase()];\n    return isNullOrUndefined(header) ? null : header;\n  };\n\n  return Ajax;\n}();\n\nexport { Ajax };","map":null,"metadata":{},"sourceType":"module"}