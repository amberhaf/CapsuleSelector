{"ast":null,"code":"import { isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { getRecurrenceStringFromDate, generate } from '../../recurrence-editor/date-generator';\nimport * as events from '../base/constant';\nimport * as util from '../base/util';\n/**\r\n * Schedule CRUD operations\r\n */\n\nvar Crud =\n/** @class */\nfunction () {\n  function Crud(parent) {\n    this.parent = parent;\n    this.crudObj = {\n      sourceEvent: null,\n      targetEvent: null,\n      isCrudAction: false\n    };\n  }\n\n  Crud.prototype.getQuery = function () {\n    var start = this.parent.activeView.startDate();\n    var end = this.parent.activeView.endDate();\n    return this.parent.dataModule.generateQuery(start, end);\n  };\n\n  Crud.prototype.getTable = function () {\n    if (this.parent.eventSettings.query) {\n      var query = this.parent.eventSettings.query.clone();\n      return query.fromTable;\n    }\n\n    return null;\n  };\n\n  Crud.prototype.refreshData = function (args) {\n    var _this = this;\n\n    var actionArgs = {\n      requestType: args.requestType,\n      cancel: false,\n      data: args.data,\n      addedRecords: args.editParms.addedRecords,\n      changedRecords: args.editParms.changedRecords,\n      deletedRecords: args.editParms.deletedRecords\n    };\n\n    if (this.parent.dragAndDropModule && this.parent.dragAndDropModule.actionObj && this.parent.dragAndDropModule.actionObj.element) {\n      this.parent.dragAndDropModule.actionObj.element.style.display = 'none';\n    }\n\n    if (this.parent.resizeModule && this.parent.resizeModule.actionObj && this.parent.resizeModule.actionObj.element) {\n      this.parent.resizeModule.actionObj.element.style.display = 'none';\n    }\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.activeViewOptions.group.allowGroupEdit && !this.parent.rowAutoHeight && !this.parent.virtualScrollModule && this.parent.activeViewOptions.group.byGroupID) {\n      if (args.requestType === 'eventCreated' || args.requestType === 'eventRemoved') {\n        this.crudObj.isCrudAction = true;\n        this.crudObj.sourceEvent = [];\n        var crudData = args.data instanceof Array ? args.data : (typeof args.data === 'string' || typeof args.data === 'number') && args.requestType === 'eventRemoved' ? args.editParms.deletedRecords : [args.data];\n\n        var _loop_1 = function _loop_1(data) {\n          this_1.crudObj.isCrudAction = !(args.requestType === 'eventRemoved' && !isNullOrUndefined(data.parent));\n          var groupIndex = this_1.parent.eventBase.getGroupIndexFromEvent(data);\n\n          if (this_1.parent.crudModule.crudObj.sourceEvent.filter(function (tdData) {\n            return tdData.groupIndex === groupIndex;\n          }).length === 0 && this_1.crudObj.isCrudAction) {\n            this_1.crudObj.sourceEvent.push(this_1.parent.resourceBase.lastResourceLevel[groupIndex]);\n          }\n        };\n\n        var this_1 = this;\n\n        for (var _i = 0, crudData_1 = crudData; _i < crudData_1.length; _i++) {\n          var data = crudData_1[_i];\n\n          _loop_1(data);\n        }\n\n        this.crudObj.targetEvent = this.crudObj.sourceEvent;\n      }\n    }\n\n    if (this.parent.dataModule.dataManager.dataSource.offline) {\n      this.parent.trigger(events.actionComplete, actionArgs, function (offlineArgs) {\n        if (!offlineArgs.cancel) {\n          _this.parent.renderModule.refreshDataManager();\n        }\n      });\n    } else {\n      args.promise.then(function (e) {\n        if (_this.parent.isDestroyed) {\n          return;\n        }\n\n        _this.parent.trigger(events.actionComplete, actionArgs, function (onlineArgs) {\n          if (!onlineArgs.cancel) {\n            _this.parent.renderModule.refreshDataManager();\n          }\n        });\n      }).catch(function (e) {\n        if (_this.parent.isDestroyed) {\n          return;\n        } // tslint:disable:no-any\n\n\n        _this.parent.trigger(events.actionFailure, {\n          error: isBlazor() ? e.error.toString() : e\n        }); // tslint:disable:no-any\n\n      });\n    }\n  };\n\n  Crud.prototype.addEvent = function (eventData) {\n    var _this = this;\n\n    if (this.parent.eventSettings.allowAdding) {\n      if (!this.isBlockEvent(eventData) && this.parent.eventBase.isBlockRange(eventData)) {\n        this.parent.quickPopup.openValidationError('blockAlert', eventData instanceof Array ? [eventData] : eventData);\n        return;\n      }\n\n      var addEvents = eventData instanceof Array ? eventData : [eventData];\n      var args = {\n        requestType: 'eventCreate',\n        cancel: false,\n        addedRecords: addEvents,\n        changedRecords: [],\n        deletedRecords: []\n      };\n\n      if (!isBlazor()) {\n        args.data = addEvents;\n      }\n\n      this.parent.trigger(events.actionBegin, args, function (addArgs) {\n        _this.serializeData(addArgs.addedRecords);\n\n        if (!addArgs.cancel) {\n          var fields = _this.parent.eventFields;\n          var editParms = {\n            addedRecords: [],\n            changedRecords: [],\n            deletedRecords: []\n          };\n          var promise = void 0;\n\n          if (addArgs.addedRecords instanceof Array) {\n            for (var _i = 0, _a = addArgs.addedRecords; _i < _a.length; _i++) {\n              var event_1 = _a[_i];\n              editParms.addedRecords.push(_this.parent.eventBase.processTimezone(event_1, true));\n            } // tslint:disable-next-line:max-line-length\n\n\n            promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n          } else {\n            var event_2 = _this.parent.eventBase.processTimezone(addArgs.addedRecords, true);\n\n            editParms.addedRecords.push(event_2);\n            promise = _this.parent.dataModule.dataManager.insert(event_2, _this.getTable(), _this.getQuery());\n          }\n\n          var crudArgs = {\n            requestType: 'eventCreated',\n            cancel: false,\n            data: addArgs.addedRecords,\n            promise: promise,\n            editParms: editParms\n          };\n\n          _this.refreshData(crudArgs);\n        }\n      });\n    }\n  };\n\n  Crud.prototype.saveEvent = function (eventData, action) {\n    var _this = this;\n\n    if (this.parent.eventSettings.allowEditing) {\n      if (this.parent.currentAction !== 'EditFollowingEvents' && !this.isBlockEvent(eventData) && this.parent.eventBase.isBlockRange(eventData)) {\n        this.parent.quickPopup.openValidationError('blockAlert', eventData instanceof Array ? [eventData] : eventData);\n        return;\n      }\n\n      this.parent.currentAction = action;\n\n      if (action) {\n        switch (action) {\n          case 'EditOccurrence':\n            this.processOccurrences(eventData, action);\n            break;\n\n          case 'EditFollowingEvents':\n            this.processFollowSeries(eventData, action);\n            break;\n\n          case 'EditSeries':\n            this.processEntireSeries(eventData, action);\n            break;\n        }\n      } else {\n        var updateEvents = eventData instanceof Array ? eventData : [eventData];\n        var args = {\n          requestType: 'eventChange',\n          cancel: false,\n          addedRecords: [],\n          changedRecords: updateEvents,\n          deletedRecords: []\n        };\n\n        if (!isBlazor()) {\n          args.data = eventData;\n        }\n\n        this.parent.trigger(events.actionBegin, args, function (saveArgs) {\n          _this.serializeData(saveArgs.changedRecords);\n\n          if (!saveArgs.cancel) {\n            var promise = void 0;\n            var fields = _this.parent.eventFields;\n            var editParms = {\n              addedRecords: [],\n              changedRecords: [],\n              deletedRecords: []\n            };\n\n            if (saveArgs.changedRecords instanceof Array) {\n              for (var _i = 0, _a = saveArgs.changedRecords; _i < _a.length; _i++) {\n                var event_3 = _a[_i];\n                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(event_3, true));\n              } // tslint:disable-next-line:max-line-length\n\n\n              promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n            } else {\n              var event_4 = _this.parent.eventBase.processTimezone(saveArgs.changedRecords, true);\n\n              editParms.changedRecords.push(event_4); // tslint:disable-next-line:max-line-length\n\n              promise = _this.parent.dataModule.dataManager.update(fields.id, event_4, _this.getTable(), _this.getQuery());\n            }\n\n            var crudArgs = {\n              requestType: 'eventChanged',\n              cancel: false,\n              data: saveArgs.changedRecords,\n              promise: promise,\n              editParms: editParms\n            };\n\n            _this.refreshData(crudArgs);\n          }\n        });\n      }\n    }\n  };\n\n  Crud.prototype.deleteEvent = function (eventData, action) {\n    var _this = this;\n\n    if (this.parent.eventSettings.allowDeleting) {\n      this.parent.currentAction = action;\n      var deleteEvents = [];\n\n      if (typeof eventData === 'string' || typeof eventData === 'number') {\n        deleteEvents = this.parent.eventsData.filter(function (eventObj) {\n          return eventObj[_this.parent.eventFields.id] === eventData;\n        });\n      } else {\n        deleteEvents = eventData instanceof Array ? eventData : [eventData];\n      }\n\n      if (action) {\n        switch (action) {\n          case 'Delete':\n            this.processEventDelete(deleteEvents);\n            break;\n\n          case 'DeleteOccurrence':\n            this.processOccurrences(deleteEvents, action);\n            break;\n\n          case 'DeleteFollowingEvents':\n            this.processFollowSeries(deleteEvents, action);\n            break;\n\n          case 'DeleteSeries':\n            this.processEntireSeries(deleteEvents, action);\n            break;\n        }\n      } else {\n        var args = {\n          requestType: 'eventRemove',\n          cancel: false,\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: deleteEvents\n        };\n\n        if (!isBlazor()) {\n          args.data = eventData;\n        }\n\n        this.parent.trigger(events.actionBegin, args, function (deleteArgs) {\n          _this.serializeData(deleteArgs.deletedRecords);\n\n          if (!deleteArgs.cancel) {\n            var promise = void 0;\n            var fields = _this.parent.eventFields;\n            var editParms = {\n              addedRecords: [],\n              changedRecords: [],\n              deletedRecords: []\n            };\n\n            if (deleteArgs.deletedRecords.length > 1) {\n              editParms.deletedRecords = editParms.deletedRecords.concat(deleteArgs.deletedRecords); // tslint:disable-next-line:max-line-length\n\n              promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n            } else {\n              editParms.deletedRecords.push(deleteArgs.deletedRecords[0]); // tslint:disable-next-line:max-line-length\n\n              promise = _this.parent.dataModule.dataManager.remove(fields.id, deleteArgs.deletedRecords[0], _this.getTable(), _this.getQuery());\n            }\n\n            _this.parent.eventBase.selectWorkCellByTime(deleteArgs.deletedRecords);\n\n            var crudArgs = {\n              requestType: 'eventRemoved',\n              cancel: false,\n              data: deleteArgs.deletedRecords,\n              promise: promise,\n              editParms: editParms\n            };\n\n            _this.refreshData(crudArgs);\n          }\n        });\n      }\n    }\n  };\n\n  Crud.prototype.processOccurrences = function (eventData, action) {\n    var _this = this;\n\n    var occurenceData = [];\n    var isDeletedRecords = false;\n\n    if (eventData instanceof Array) {\n      for (var _i = 0, eventData_1 = eventData; _i < eventData_1.length; _i++) {\n        var event_5 = eventData_1[_i];\n        occurenceData.push({\n          occurrence: event_5,\n          parent: this.getParentEvent(event_5)\n        });\n      }\n    } else {\n      occurenceData = {\n        occurrence: eventData,\n        parent: this.getParentEvent(eventData)\n      };\n    }\n\n    var updateEvents = eventData instanceof Array ? eventData : [eventData];\n    var args = {\n      requestType: action === 'EditOccurrence' ? 'eventChange' : 'eventRemove',\n      cancel: false,\n      addedRecords: [],\n      changedRecords: updateEvents,\n      deletedRecords: []\n    };\n\n    if (!isBlazor()) {\n      args.data = occurenceData;\n    }\n\n    this.parent.trigger(events.actionBegin, args, function (occurenceArgs) {\n      _this.serializeData(occurenceArgs.changedRecords);\n\n      if (!occurenceArgs.cancel) {\n        var fields = _this.parent.eventFields;\n        var editParms = {\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: []\n        };\n        var occurrenceEvents = occurenceData instanceof Array ? occurenceData : [occurenceData];\n\n        var _loop_2 = function _loop_2(a, count) {\n          var childEvent = occurenceArgs.changedRecords[a];\n          var parentEvent = occurrenceEvents[a].parent;\n          var parentException = parentEvent[fields.recurrenceException];\n\n          switch (action) {\n            case 'EditOccurrence':\n              var editedData = _this.parent.eventsProcessed.filter(function (event) {\n                return event.Guid === childEvent.Guid;\n              })[0];\n\n              var exceptionDate = _this.excludeDateCheck(editedData[fields.startTime], parentException);\n\n              if (exceptionDate !== parentEvent[fields.recurrenceException]) {\n                parentEvent[fields.recurrenceException] = exceptionDate;\n                childEvent[fields.recurrenceException] = getRecurrenceStringFromDate(editedData[fields.startTime]);\n                childEvent[fields.recurrenceID] = parentEvent[fields.id];\n                childEvent[fields.followingID] = null;\n                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n                editParms.addedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n              } else {\n                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n              }\n\n              break;\n\n            case 'DeleteOccurrence':\n              if (!childEvent[fields.recurrenceException]) {\n                parentEvent[fields.recurrenceException] = _this.excludeDateCheck(childEvent[fields.startTime], parentException);\n                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n              }\n\n              if (childEvent[fields.id] !== parentEvent[fields.id]) {\n                editParms.deletedRecords.push(childEvent);\n                isDeletedRecords = true;\n              }\n\n              break;\n          }\n        };\n\n        for (var a = 0, count = occurenceArgs.changedRecords.length; a < count; a++) {\n          _loop_2(a, count);\n        } // tslint:disable-next-line:max-line-length\n\n\n        var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n\n        _this.parent.eventBase.selectWorkCellByTime(occurenceArgs.changedRecords);\n\n        var crudArgs = {\n          requestType: action === 'EditOccurrence' ? 'eventChanged' : 'eventRemoved',\n          cancel: false,\n          data: isDeletedRecords ? occurenceArgs.deletedRecords : occurenceArgs.changedRecords,\n          promise: promise,\n          editParms: editParms\n        };\n\n        _this.refreshData(crudArgs);\n      }\n    });\n  };\n\n  Crud.prototype.processFollowSeries = function (eventData, action) {\n    var _this = this;\n\n    var followData = [];\n\n    if (eventData instanceof Array) {\n      for (var _i = 0, eventData_2 = eventData; _i < eventData_2.length; _i++) {\n        var event_6 = eventData_2[_i];\n        followData.push({\n          occurrence: event_6,\n          parent: this.getParentEvent(event_6)\n        });\n      }\n    } else {\n      followData = {\n        occurrence: eventData,\n        parent: this.getParentEvent(eventData)\n      };\n    }\n\n    var updateFollowEvents = eventData instanceof Array ? eventData : [eventData];\n    var args = {\n      requestType: action === 'EditFollowingEvents' ? 'eventChange' : 'eventRemove',\n      cancel: false,\n      addedRecords: [],\n      changedRecords: updateFollowEvents,\n      deletedRecords: []\n    };\n\n    if (!isBlazor()) {\n      args.data = followData;\n    }\n\n    this.parent.trigger(events.actionBegin, args, function (followArgs) {\n      _this.serializeData(followArgs.changedRecords);\n\n      if (!followArgs.cancel) {\n        var fields_1 = _this.parent.eventFields;\n        var editParms = {\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: []\n        };\n        var followEvents = followData instanceof Array ? followData : [followData];\n\n        var _loop_3 = function _loop_3(a, count) {\n          var childEvent = followArgs.changedRecords[a];\n          var parentEvent = followEvents[a].parent;\n\n          var followData_1 = _this.parent.eventBase.getEventCollections(parentEvent, childEvent);\n\n          switch (action) {\n            case 'EditFollowingEvents':\n              _this.processRecurrenceRule(parentEvent, childEvent);\n\n              var isSplitted = !_this.parent.eventBase.isFollowingEvent(parentEvent, childEvent);\n              childEvent[fields_1.followingID] = isSplitted ? null : parentEvent[fields_1.id];\n              childEvent[fields_1.recurrenceID] = null;\n              editParms.addedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n              editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n\n              if (!_this.parent.uiStateValues.isIgnoreOccurrence) {\n                childEvent[fields_1.recurrenceException] = null;\n\n                if (followData_1.occurrence.length > 0) {\n                  var rule = followData_1.occurrence.slice(-1)[0][fields_1.recurrenceRule];\n\n                  if (rule.indexOf('COUNT') === -1) {\n                    childEvent[fields_1.recurrenceRule] = rule;\n                  }\n                }\n\n                if (followData_1.follow.length > 0) {\n                  childEvent[fields_1.recurrenceRule] = followData_1.follow.slice(-1)[0][fields_1.recurrenceRule];\n                  editParms.deletedRecords = editParms.deletedRecords.concat(followData_1.follow);\n                }\n\n                if (isSplitted) {\n                  followData_1.occurrence = followData_1.occurrence.filter(function (eventObj) {\n                    return eventObj[fields_1.recurrenceID] === childEvent[fields_1.id];\n                  });\n                }\n\n                editParms.deletedRecords = editParms.deletedRecords.concat(followData_1.occurrence);\n              }\n\n              break;\n\n            case 'DeleteFollowingEvents':\n              _this.processRecurrenceRule(parentEvent, childEvent[fields_1.startTime]);\n\n              editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n              editParms.deletedRecords = editParms.deletedRecords.concat(followData_1.occurrence).concat(followData_1.follow);\n              break;\n          }\n        };\n\n        for (var a = 0, count = followArgs.changedRecords.length; a < count; a++) {\n          _loop_3(a, count);\n        } // tslint:disable-next-line:max-line-length\n\n\n        var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields_1.id, _this.getTable(), _this.getQuery());\n\n        _this.parent.eventBase.selectWorkCellByTime(followArgs.changedRecords);\n\n        var crudArgs = {\n          requestType: action === 'EditFollowingEvents' ? 'eventChanged' : 'eventRemoved',\n          cancel: false,\n          data: followArgs.changedRecords,\n          promise: promise,\n          editParms: editParms\n        };\n\n        _this.refreshData(crudArgs);\n      }\n    });\n  };\n\n  Crud.prototype.processEntireSeries = function (eventData, action) {\n    var _this = this;\n\n    var seriesData = [];\n    var isDeletedRecords = false;\n\n    if (eventData instanceof Array) {\n      for (var _i = 0, eventData_3 = eventData; _i < eventData_3.length; _i++) {\n        var event_7 = eventData_3[_i];\n        seriesData.push(this.getParentEvent(event_7, true));\n      }\n    } else {\n      seriesData = this.getParentEvent(eventData, true);\n    }\n\n    var updateSeriesEvents = eventData instanceof Array ? eventData : [eventData];\n    var args = {\n      requestType: action === 'EditSeries' ? 'eventChange' : 'eventRemove',\n      cancel: false,\n      addedRecords: [],\n      changedRecords: updateSeriesEvents,\n      deletedRecords: []\n    };\n\n    if (!isBlazor()) {\n      args.data = seriesData;\n    }\n\n    this.parent.trigger(events.actionBegin, args, function (seriesArgs) {\n      _this.serializeData(seriesArgs.changedRecords);\n\n      if (!seriesArgs.cancel) {\n        var fields_2 = _this.parent.eventFields;\n        var editParms = {\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: []\n        };\n        var seriesEvents = seriesData instanceof Array ? seriesData : [seriesData];\n\n        var _loop_4 = function _loop_4(a, count) {\n          var childEvent = seriesArgs.changedRecords[a];\n          var parentEvent = seriesEvents[a];\n\n          var eventCollections = _this.parent.eventBase.getEventCollections(parentEvent);\n\n          var deletedEvents = eventCollections.follow.concat(eventCollections.occurrence);\n\n          switch (action) {\n            case 'EditSeries':\n              if (childEvent[fields_2.startTime] > parentEvent[fields_2.startTime] && childEvent[fields_2.recurrenceRule]) {\n                _this.processRecurrenceRule(parentEvent, childEvent);\n              }\n\n              childEvent[fields_2.id] = parentEvent[fields_2.id];\n              childEvent[fields_2.recurrenceID] = null;\n              childEvent[fields_2.followingID] = null;\n\n              if (_this.parent.uiStateValues.isIgnoreOccurrence && childEvent[fields_2.recurrenceException]) {\n                var originalParent = _this.parent.eventsData.filter(function (eventObj) {\n                  return eventObj[fields_2.id] === childEvent[fields_2.id];\n                });\n\n                if (originalParent.length > 0) {\n                  childEvent[fields_2.recurrenceRule] = originalParent[0][fields_2.recurrenceRule];\n                }\n              } else {\n                childEvent[fields_2.recurrenceException] = null;\n                editParms.deletedRecords = editParms.deletedRecords.concat(deletedEvents);\n              }\n\n              editParms.changedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n              _this.parent.uiStateValues.isIgnoreOccurrence = false;\n              break;\n\n            case 'DeleteSeries':\n              editParms.deletedRecords = editParms.deletedRecords.concat(deletedEvents.concat(parentEvent));\n              isDeletedRecords = true;\n              break;\n          }\n        };\n\n        for (var a = 0, count = seriesArgs.changedRecords.length; a < count; a++) {\n          _loop_4(a, count);\n        } // tslint:disable-next-line:max-line-length\n\n\n        var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields_2.id, _this.getTable(), _this.getQuery());\n\n        _this.parent.eventBase.selectWorkCellByTime(seriesArgs.changedRecords);\n\n        var crudArgs = {\n          requestType: action === 'EditSeries' ? 'eventChanged' : 'eventRemoved',\n          cancel: false,\n          data: isDeletedRecords ? seriesArgs.deletedRecords : seriesArgs.changedRecords,\n          promise: promise,\n          editParms: editParms\n        };\n\n        _this.refreshData(crudArgs);\n      }\n    });\n  };\n\n  Crud.prototype.processEventDelete = function (eventData) {\n    var _this = this;\n\n    var deleteData = [];\n\n    for (var _i = 0, eventData_4 = eventData; _i < eventData_4.length; _i++) {\n      var eventObj = eventData_4[_i];\n\n      if (eventObj[this.parent.eventFields.recurrenceRule]) {\n        deleteData.push({\n          occurrence: eventObj,\n          parent: this.getParentEvent(eventObj)\n        });\n      } else {\n        deleteData.push(eventObj);\n      }\n    }\n\n    var args = {\n      requestType: 'eventRemove',\n      cancel: false,\n      addedRecords: [],\n      changedRecords: [],\n      deletedRecords: eventData\n    };\n\n    if (!isBlazor()) {\n      args.data = deleteData;\n    }\n\n    this.parent.trigger(events.actionBegin, args, function (deleteArgs) {\n      _this.serializeData(deleteArgs.deletedRecords);\n\n      if (!deleteArgs.cancel) {\n        var fields_3 = _this.parent.eventFields;\n        var editParms = {\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: []\n        };\n\n        var _loop_5 = function _loop_5(a, count) {\n          var isDelete = isNullOrUndefined(deleteArgs.deletedRecords[a][_this.parent.eventFields.recurrenceRule]);\n\n          if (!isDelete) {\n            var parentEvent_1 = deleteData[a].parent;\n            var isEdited = editParms.changedRecords.filter(function (obj) {\n              return obj[fields_3.id] === parentEvent_1[fields_3.id];\n            });\n            var editedDate = deleteArgs.deletedRecords[a][fields_3.startTime];\n\n            if (isEdited.length > 0) {\n              var editedData = isEdited[0];\n              editedData[fields_3.recurrenceException] = _this.excludeDateCheck(editedDate, editedData[fields_3.recurrenceException]);\n            } else {\n              parentEvent_1[fields_3.recurrenceException] = _this.excludeDateCheck(editedDate, parentEvent_1[fields_3.recurrenceException]);\n            }\n\n            if (isEdited.length === 0) {\n              editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent_1, true));\n            }\n\n            isDelete = deleteArgs.deletedRecords[a][fields_3.id] !== parentEvent_1[fields_3.id];\n          }\n\n          if (isDelete) {\n            editParms.deletedRecords.push(deleteArgs.deletedRecords[a]);\n          }\n        };\n\n        for (var a = 0, count = deleteArgs.deletedRecords.length; a < count; a++) {\n          _loop_5(a, count);\n        } // tslint:disable-next-line:max-line-length\n\n\n        var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields_3.id, _this.getTable(), _this.getQuery());\n\n        var crudArgs = {\n          requestType: 'eventRemoved',\n          cancel: false,\n          data: deleteArgs.deletedRecords,\n          promise: promise,\n          editParms: editParms\n        };\n\n        _this.refreshData(crudArgs);\n      }\n    });\n  };\n\n  Crud.prototype.serializeData = function (eventData) {\n    if (isBlazor()) {\n      var eventFields = this.parent.eventFields;\n\n      for (var _i = 0, _a = eventData; _i < _a.length; _i++) {\n        var event_8 = _a[_i];\n        event_8[eventFields.startTime] = this.parent.getDateTime(event_8[eventFields.startTime]);\n        event_8[eventFields.endTime] = this.parent.getDateTime(event_8[eventFields.endTime]);\n      }\n    }\n  };\n\n  Crud.prototype.getParentEvent = function (event, isParent) {\n    if (isParent === void 0) {\n      isParent = false;\n    }\n\n    var parentEvent = this.parent.eventBase.getParentEvent(event, isParent) || event;\n\n    if (parentEvent[this.parent.eventFields.startTimezone] || parentEvent[this.parent.eventFields.endTimezone]) {\n      this.parent.eventBase.timezoneConvert(parentEvent);\n    }\n\n    return parentEvent;\n  };\n\n  Crud.prototype.excludeDateCheck = function (eventStartTime, exceptionDateList) {\n    var exDate = getRecurrenceStringFromDate(eventStartTime);\n\n    if (!isNullOrUndefined(exceptionDateList)) {\n      if (exceptionDateList.indexOf(exDate) === -1) {\n        exceptionDateList = !isNullOrUndefined(exceptionDateList) ? exceptionDateList + ',' + exDate : exDate;\n      }\n    } else {\n      exceptionDateList = exDate;\n    }\n\n    return exceptionDateList;\n  };\n\n  Crud.prototype.processRecurrenceRule = function (parentEvent, followEvent) {\n    var fields = this.parent.eventFields;\n    var recurrenceRule = parentEvent[fields.recurrenceRule];\n    var endDate;\n\n    if (followEvent instanceof Date) {\n      endDate = new Date(+followEvent);\n    } else {\n      endDate = new Date(+followEvent[fields.startTime]);\n      var newRecurrenceRule = followEvent[fields.recurrenceRule];\n      var startDate = parentEvent[fields.startTime];\n      var ruleException = this.parent.currentAction === 'DeleteFollowingEvents' ? followEvent[fields.recurrenceException] : null;\n      var dateCollection = generate(startDate, newRecurrenceRule, ruleException, this.parent.activeViewOptions.firstDayOfWeek);\n      var untilDate = new Date(dateCollection.slice(-1)[0]);\n      untilDate.setHours(endDate.getHours(), endDate.getMinutes(), endDate.getSeconds());\n      endDate.setHours(startDate.getHours(), startDate.getMinutes(), startDate.getSeconds());\n      followEvent[fields.recurrenceRule] = this.getUpdatedRecurrenceRule(newRecurrenceRule, new Date(+untilDate), false);\n    }\n\n    parentEvent[fields.recurrenceRule] = this.getUpdatedRecurrenceRule(recurrenceRule, util.addDays(new Date(endDate.getTime()), -1), true);\n  };\n\n  Crud.prototype.getUpdatedRecurrenceRule = function (recurrenceRule, untilDate, isParent) {\n    var splitRule = recurrenceRule.split(';');\n    var updatedRule = '';\n\n    for (var _i = 0, splitRule_1 = splitRule; _i < splitRule_1.length; _i++) {\n      var rule = splitRule_1[_i];\n\n      if (rule !== '') {\n        var ruleKey = rule.split('=')[0];\n        var ruleValue = rule.split('=')[1];\n\n        if (ruleKey === 'COUNT' || ruleKey === 'UNTIL') {\n          ruleValue = getRecurrenceStringFromDate(untilDate);\n          rule = rule.replace(rule, 'UNTIL=' + ruleValue);\n        }\n\n        updatedRule += rule + ';';\n      }\n    }\n\n    if (isParent && updatedRule.indexOf('UNTIL') === -1) {\n      updatedRule += 'UNTIL=' + getRecurrenceStringFromDate(untilDate);\n    }\n\n    return updatedRule;\n  };\n\n  Crud.prototype.isBlockEvent = function (eventData) {\n    var eventCollection = eventData instanceof Array ? eventData : [eventData];\n    var value = false;\n\n    for (var _i = 0, eventCollection_1 = eventCollection; _i < eventCollection_1.length; _i++) {\n      var event_9 = eventCollection_1[_i];\n      value = event_9[this.parent.eventFields.isBlock] || false;\n    }\n\n    return value;\n  };\n\n  return Crud;\n}();\n\nexport { Crud };","map":null,"metadata":{},"sourceType":"module"}